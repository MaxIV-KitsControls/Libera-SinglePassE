/*----- PROTECTED REGION ID(LiberaSinglePassEClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        LiberaSinglePassEClass.cpp
//
// description : C++ source for the LiberaSinglePassEClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the �name� once per process.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaSinglePassEClass.h>

/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass.cpp

//-------------------------------------------------------------------
/**
 *	Create LiberaSinglePassEClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_LiberaSinglePassE_class(const char *name) {
		return LiberaSinglePassE_ns::LiberaSinglePassEClass::init(name);
	}
}

namespace LiberaSinglePassE_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
LiberaSinglePassEClass *LiberaSinglePassEClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::LiberaSinglePassEClass(string &s)
 * description : 	constructor for the LiberaSinglePassEClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
LiberaSinglePassEClass::LiberaSinglePassEClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering LiberaSinglePassEClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::constructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::constructor

	cout2 << "Leaving LiberaSinglePassEClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::~LiberaSinglePassEClass()
 * description : 	destructor for the LiberaSinglePassEClass
 */
//--------------------------------------------------------
LiberaSinglePassEClass::~LiberaSinglePassEClass()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
LiberaSinglePassEClass *LiberaSinglePassEClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new LiberaSinglePassEClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
LiberaSinglePassEClass *LiberaSinglePassEClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetClass::execute(): arrived" << endl;
	((static_cast<LiberaSinglePassE *>(device))->reset());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetInterlockStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetInterlockStatusClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetInterlockStatusClass::execute(): arrived" << endl;
	((static_cast<LiberaSinglePassE *>(device))->reset_interlock_status());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MagicCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MagicCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MagicCommandClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<LiberaSinglePassE *>(device))->magic_command(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "LiberaIpAddr";
	prop_desc = "Libera IP address";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "LiberaBoard";
	prop_desc = "The board name (and index) used by the Libera box for multi board setup";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Location";
	prop_desc = "The libera box physical place (TL1, BOOSTER,....)";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Single_Pass_Threshold";
	prop_desc = "Start point of the data processing";
	prop_def  = "500";
	vect_data.clear();
	vect_data.push_back("500");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Libera Brillance Single Pass E");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This Tango class is the interface of the Instrumentation Technologies (IT) Libera");
	str_desc.push_back("Brilliance Single Pass E equipment. This class supports only a subset of all the");
	str_desc.push_back("equipment features. It is the basic equipment for a Injection and Transfer Efficiency");
	str_desc.push_back("Measurement System");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("LiberaSinglePassE");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::device_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new LiberaSinglePassE(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		LiberaSinglePassE *dev = static_cast<LiberaSinglePassE *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::device_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::attribute_factory_before
	//	Attribute : ADCBufferSize
	ADCBufferSizeAttrib	*adcbuffersize = new ADCBufferSizeAttrib();
	Tango::UserDefaultAttrProp	adcbuffersize_prop;
	adcbuffersize_prop.set_description("The Libera box ADC buffer size (between 10 and 8192)");
	adcbuffersize_prop.set_label("Buffer Size");
	adcbuffersize_prop.set_unit("samples");
	//	standard_unit	not set for ADCBufferSize
	//	display_unit	not set for ADCBufferSize
	adcbuffersize_prop.set_format("%4d");
	adcbuffersize_prop.set_max_value("8192");
	adcbuffersize_prop.set_min_value("10");
	//	max_alarm	not set for ADCBufferSize
	//	min_alarm	not set for ADCBufferSize
	//	max_warning	not set for ADCBufferSize
	//	min_warning	not set for ADCBufferSize
	//	delta_t	not set for ADCBufferSize
	//	delta_val	not set for ADCBufferSize
	
	adcbuffersize->set_default_properties(adcbuffersize_prop);
	//	Not Polled
	adcbuffersize->set_disp_level(Tango::OPERATOR);
	adcbuffersize->set_memorized();
	adcbuffersize->set_memorized_init(true);
	att_list.push_back(adcbuffersize);

	//	Attribute : TriggerCounter
	TriggerCounterAttrib	*triggercounter = new TriggerCounterAttrib();
	Tango::UserDefaultAttrProp	triggercounter_prop;
	triggercounter_prop.set_description("Trigger counter. Incremented at each trigger");
	triggercounter_prop.set_label("Trig. Counter");
	//	unit	not set for TriggerCounter
	//	standard_unit	not set for TriggerCounter
	//	display_unit	not set for TriggerCounter
	triggercounter_prop.set_format("%d");
	//	max_value	not set for TriggerCounter
	//	min_value	not set for TriggerCounter
	//	max_alarm	not set for TriggerCounter
	//	min_alarm	not set for TriggerCounter
	//	max_warning	not set for TriggerCounter
	//	min_warning	not set for TriggerCounter
	//	delta_t	not set for TriggerCounter
	//	delta_val	not set for TriggerCounter
	
	triggercounter->set_default_properties(triggercounter_prop);
	//	Not Polled
	triggercounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggercounter);

	//	Attribute : Fan1Speed
	Fan1SpeedAttrib	*fan1speed = new Fan1SpeedAttrib();
	Tango::UserDefaultAttrProp	fan1speed_prop;
	fan1speed_prop.set_description("First fan speed");
	fan1speed_prop.set_label("Fan.1 speed");
	fan1speed_prop.set_unit("rpm");
	//	standard_unit	not set for Fan1Speed
	//	display_unit	not set for Fan1Speed
	fan1speed_prop.set_format("%4d");
	//	max_value	not set for Fan1Speed
	//	min_value	not set for Fan1Speed
	//	max_alarm	not set for Fan1Speed
	//	min_alarm	not set for Fan1Speed
	//	max_warning	not set for Fan1Speed
	//	min_warning	not set for Fan1Speed
	//	delta_t	not set for Fan1Speed
	//	delta_val	not set for Fan1Speed
	
	fan1speed->set_default_properties(fan1speed_prop);
	//	Not Polled
	fan1speed->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(fan1speed);

	//	Attribute : Fan2Speed
	Fan2SpeedAttrib	*fan2speed = new Fan2SpeedAttrib();
	Tango::UserDefaultAttrProp	fan2speed_prop;
	fan2speed_prop.set_description("Second fan speed");
	fan2speed_prop.set_label("Fan.2 speed");
	fan2speed_prop.set_unit("rpm");
	//	standard_unit	not set for Fan2Speed
	//	display_unit	not set for Fan2Speed
	fan2speed_prop.set_format("%4d");
	//	max_value	not set for Fan2Speed
	//	min_value	not set for Fan2Speed
	//	max_alarm	not set for Fan2Speed
	//	min_alarm	not set for Fan2Speed
	//	max_warning	not set for Fan2Speed
	//	min_warning	not set for Fan2Speed
	//	delta_t	not set for Fan2Speed
	//	delta_val	not set for Fan2Speed
	
	fan2speed->set_default_properties(fan2speed_prop);
	//	Not Polled
	fan2speed->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(fan2speed);

	//	Attribute : Temp1
	Temp1Attrib	*temp1 = new Temp1Attrib();
	Tango::UserDefaultAttrProp	temp1_prop;
	temp1_prop.set_description("The Libera box first temperature");
	temp1_prop.set_label("Temperature 1");
	temp1_prop.set_unit("C deg");
	//	standard_unit	not set for Temp1
	//	display_unit	not set for Temp1
	temp1_prop.set_format("%2d");
	//	max_value	not set for Temp1
	//	min_value	not set for Temp1
	temp1_prop.set_max_alarm("65");
	//	min_alarm	not set for Temp1
	//	max_warning	not set for Temp1
	//	min_warning	not set for Temp1
	//	delta_t	not set for Temp1
	//	delta_val	not set for Temp1
	
	temp1->set_default_properties(temp1_prop);
	//	Not Polled
	temp1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(temp1);

	//	Attribute : Temp2
	Temp2Attrib	*temp2 = new Temp2Attrib();
	Tango::UserDefaultAttrProp	temp2_prop;
	temp2_prop.set_description("The Libera box second temperature");
	temp2_prop.set_label("Temperature 2");
	temp2_prop.set_unit("C deg");
	//	standard_unit	not set for Temp2
	//	display_unit	not set for Temp2
	temp2_prop.set_format("%2d");
	//	max_value	not set for Temp2
	//	min_value	not set for Temp2
	temp2_prop.set_max_alarm("65");
	//	min_alarm	not set for Temp2
	//	max_warning	not set for Temp2
	//	min_warning	not set for Temp2
	//	delta_t	not set for Temp2
	//	delta_val	not set for Temp2
	
	temp2->set_default_properties(temp2_prop);
	//	Not Polled
	temp2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(temp2);

	//	Attribute : Temp3
	Temp3Attrib	*temp3 = new Temp3Attrib();
	Tango::UserDefaultAttrProp	temp3_prop;
	temp3_prop.set_description("The Libera box third temperature");
	temp3_prop.set_label("Temperature 3");
	temp3_prop.set_unit("C deg");
	//	standard_unit	not set for Temp3
	//	display_unit	not set for Temp3
	temp3_prop.set_format("%2d");
	//	max_value	not set for Temp3
	//	min_value	not set for Temp3
	temp3_prop.set_max_alarm("65");
	//	min_alarm	not set for Temp3
	//	max_warning	not set for Temp3
	//	min_warning	not set for Temp3
	//	delta_t	not set for Temp3
	//	delta_val	not set for Temp3
	
	temp3->set_default_properties(temp3_prop);
	//	Not Polled
	temp3->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(temp3);

	//	Attribute : Calibration_ka
	Calibration_kaAttrib	*calibration_ka = new Calibration_kaAttrib();
	Tango::UserDefaultAttrProp	calibration_ka_prop;
	calibration_ka_prop.set_description("Matjaz.....");
	calibration_ka_prop.set_label("calibration_ka");
	//	unit	not set for Calibration_ka
	//	standard_unit	not set for Calibration_ka
	//	display_unit	not set for Calibration_ka
	//	format	not set for Calibration_ka
	//	max_value	not set for Calibration_ka
	//	min_value	not set for Calibration_ka
	//	max_alarm	not set for Calibration_ka
	//	min_alarm	not set for Calibration_ka
	//	max_warning	not set for Calibration_ka
	//	min_warning	not set for Calibration_ka
	//	delta_t	not set for Calibration_ka
	//	delta_val	not set for Calibration_ka
	
	calibration_ka->set_default_properties(calibration_ka_prop);
	//	Not Polled
	calibration_ka->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(calibration_ka);

	//	Attribute : Calibration_kb
	Calibration_kbAttrib	*calibration_kb = new Calibration_kbAttrib();
	Tango::UserDefaultAttrProp	calibration_kb_prop;
	calibration_kb_prop.set_description("Matjaz.....");
	calibration_kb_prop.set_label("calibration_kb");
	//	unit	not set for Calibration_kb
	//	standard_unit	not set for Calibration_kb
	//	display_unit	not set for Calibration_kb
	//	format	not set for Calibration_kb
	//	max_value	not set for Calibration_kb
	//	min_value	not set for Calibration_kb
	//	max_alarm	not set for Calibration_kb
	//	min_alarm	not set for Calibration_kb
	//	max_warning	not set for Calibration_kb
	//	min_warning	not set for Calibration_kb
	//	delta_t	not set for Calibration_kb
	//	delta_val	not set for Calibration_kb
	
	calibration_kb->set_default_properties(calibration_kb_prop);
	//	Not Polled
	calibration_kb->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(calibration_kb);

	//	Attribute : Calibration_kc
	Calibration_kcAttrib	*calibration_kc = new Calibration_kcAttrib();
	Tango::UserDefaultAttrProp	calibration_kc_prop;
	calibration_kc_prop.set_description("Matjaz.....");
	calibration_kc_prop.set_label("calibration_kc");
	//	unit	not set for Calibration_kc
	//	standard_unit	not set for Calibration_kc
	//	display_unit	not set for Calibration_kc
	//	format	not set for Calibration_kc
	//	max_value	not set for Calibration_kc
	//	min_value	not set for Calibration_kc
	//	max_alarm	not set for Calibration_kc
	//	min_alarm	not set for Calibration_kc
	//	max_warning	not set for Calibration_kc
	//	min_warning	not set for Calibration_kc
	//	delta_t	not set for Calibration_kc
	//	delta_val	not set for Calibration_kc
	
	calibration_kc->set_default_properties(calibration_kc_prop);
	//	Not Polled
	calibration_kc->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(calibration_kc);

	//	Attribute : Calibration_kd
	Calibration_kdAttrib	*calibration_kd = new Calibration_kdAttrib();
	Tango::UserDefaultAttrProp	calibration_kd_prop;
	calibration_kd_prop.set_description("Matjaz.....");
	calibration_kd_prop.set_label("calibration_kd");
	//	unit	not set for Calibration_kd
	//	standard_unit	not set for Calibration_kd
	//	display_unit	not set for Calibration_kd
	//	format	not set for Calibration_kd
	//	max_value	not set for Calibration_kd
	//	min_value	not set for Calibration_kd
	//	max_alarm	not set for Calibration_kd
	//	min_alarm	not set for Calibration_kd
	//	max_warning	not set for Calibration_kd
	//	min_warning	not set for Calibration_kd
	//	delta_t	not set for Calibration_kd
	//	delta_val	not set for Calibration_kd
	
	calibration_kd->set_default_properties(calibration_kd_prop);
	//	Not Polled
	calibration_kd->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(calibration_kd);

	//	Attribute : Linear_x_k
	Linear_x_kAttrib	*linear_x_k = new Linear_x_kAttrib();
	Tango::UserDefaultAttrProp	linear_x_k_prop;
	linear_x_k_prop.set_description("Matjaz.....");
	linear_x_k_prop.set_label("linear_x_k");
	//	unit	not set for Linear_x_k
	//	standard_unit	not set for Linear_x_k
	//	display_unit	not set for Linear_x_k
	//	format	not set for Linear_x_k
	//	max_value	not set for Linear_x_k
	//	min_value	not set for Linear_x_k
	//	max_alarm	not set for Linear_x_k
	//	min_alarm	not set for Linear_x_k
	//	max_warning	not set for Linear_x_k
	//	min_warning	not set for Linear_x_k
	//	delta_t	not set for Linear_x_k
	//	delta_val	not set for Linear_x_k
	
	linear_x_k->set_default_properties(linear_x_k_prop);
	//	Not Polled
	linear_x_k->set_disp_level(Tango::EXPERT);
	linear_x_k->set_memorized();
	linear_x_k->set_memorized_init(true);
	att_list.push_back(linear_x_k);

	//	Attribute : Linear_x_offs
	Linear_x_offsAttrib	*linear_x_offs = new Linear_x_offsAttrib();
	Tango::UserDefaultAttrProp	linear_x_offs_prop;
	linear_x_offs_prop.set_description("Matjaz.....");
	linear_x_offs_prop.set_label("linear_x_offs");
	linear_x_offs_prop.set_unit("nm");
	//	standard_unit	not set for Linear_x_offs
	//	display_unit	not set for Linear_x_offs
	//	format	not set for Linear_x_offs
	//	max_value	not set for Linear_x_offs
	//	min_value	not set for Linear_x_offs
	//	max_alarm	not set for Linear_x_offs
	//	min_alarm	not set for Linear_x_offs
	//	max_warning	not set for Linear_x_offs
	//	min_warning	not set for Linear_x_offs
	//	delta_t	not set for Linear_x_offs
	//	delta_val	not set for Linear_x_offs
	
	linear_x_offs->set_default_properties(linear_x_offs_prop);
	//	Not Polled
	linear_x_offs->set_disp_level(Tango::EXPERT);
	linear_x_offs->set_memorized();
	linear_x_offs->set_memorized_init(true);
	att_list.push_back(linear_x_offs);

	//	Attribute : Linear_y_k
	Linear_y_kAttrib	*linear_y_k = new Linear_y_kAttrib();
	Tango::UserDefaultAttrProp	linear_y_k_prop;
	linear_y_k_prop.set_description("Matjaz.....");
	linear_y_k_prop.set_label("linear_y_k");
	//	unit	not set for Linear_y_k
	//	standard_unit	not set for Linear_y_k
	//	display_unit	not set for Linear_y_k
	//	format	not set for Linear_y_k
	//	max_value	not set for Linear_y_k
	//	min_value	not set for Linear_y_k
	//	max_alarm	not set for Linear_y_k
	//	min_alarm	not set for Linear_y_k
	//	max_warning	not set for Linear_y_k
	//	min_warning	not set for Linear_y_k
	//	delta_t	not set for Linear_y_k
	//	delta_val	not set for Linear_y_k
	
	linear_y_k->set_default_properties(linear_y_k_prop);
	//	Not Polled
	linear_y_k->set_disp_level(Tango::EXPERT);
	linear_y_k->set_memorized();
	linear_y_k->set_memorized_init(true);
	att_list.push_back(linear_y_k);

	//	Attribute : Linear_y_offs
	Linear_y_offsAttrib	*linear_y_offs = new Linear_y_offsAttrib();
	Tango::UserDefaultAttrProp	linear_y_offs_prop;
	linear_y_offs_prop.set_description("Matjaz.....");
	linear_y_offs_prop.set_label("linear_y_offs");
	linear_y_offs_prop.set_unit("nm");
	//	standard_unit	not set for Linear_y_offs
	//	display_unit	not set for Linear_y_offs
	//	format	not set for Linear_y_offs
	//	max_value	not set for Linear_y_offs
	//	min_value	not set for Linear_y_offs
	//	max_alarm	not set for Linear_y_offs
	//	min_alarm	not set for Linear_y_offs
	//	max_warning	not set for Linear_y_offs
	//	min_warning	not set for Linear_y_offs
	//	delta_t	not set for Linear_y_offs
	//	delta_val	not set for Linear_y_offs
	
	linear_y_offs->set_default_properties(linear_y_offs_prop);
	//	Not Polled
	linear_y_offs->set_disp_level(Tango::EXPERT);
	linear_y_offs->set_memorized();
	linear_y_offs->set_memorized_init(true);
	att_list.push_back(linear_y_offs);

	//	Attribute : Linear_q_k
	Linear_q_kAttrib	*linear_q_k = new Linear_q_kAttrib();
	Tango::UserDefaultAttrProp	linear_q_k_prop;
	linear_q_k_prop.set_description("Matjaz.....");
	linear_q_k_prop.set_label("linear_q_k");
	//	unit	not set for Linear_q_k
	//	standard_unit	not set for Linear_q_k
	//	display_unit	not set for Linear_q_k
	//	format	not set for Linear_q_k
	//	max_value	not set for Linear_q_k
	//	min_value	not set for Linear_q_k
	//	max_alarm	not set for Linear_q_k
	//	min_alarm	not set for Linear_q_k
	//	max_warning	not set for Linear_q_k
	//	min_warning	not set for Linear_q_k
	//	delta_t	not set for Linear_q_k
	//	delta_val	not set for Linear_q_k
	
	linear_q_k->set_default_properties(linear_q_k_prop);
	//	Not Polled
	linear_q_k->set_disp_level(Tango::EXPERT);
	linear_q_k->set_memorized();
	linear_q_k->set_memorized_init(true);
	att_list.push_back(linear_q_k);

	//	Attribute : Linear_q_offs
	Linear_q_offsAttrib	*linear_q_offs = new Linear_q_offsAttrib();
	Tango::UserDefaultAttrProp	linear_q_offs_prop;
	linear_q_offs_prop.set_description("Matjaz.....");
	linear_q_offs_prop.set_label("linear_q_offs");
	linear_q_offs_prop.set_unit("nm");
	//	standard_unit	not set for Linear_q_offs
	//	display_unit	not set for Linear_q_offs
	//	format	not set for Linear_q_offs
	//	max_value	not set for Linear_q_offs
	//	min_value	not set for Linear_q_offs
	//	max_alarm	not set for Linear_q_offs
	//	min_alarm	not set for Linear_q_offs
	//	max_warning	not set for Linear_q_offs
	//	min_warning	not set for Linear_q_offs
	//	delta_t	not set for Linear_q_offs
	//	delta_val	not set for Linear_q_offs
	
	linear_q_offs->set_default_properties(linear_q_offs_prop);
	//	Not Polled
	linear_q_offs->set_disp_level(Tango::EXPERT);
	linear_q_offs->set_memorized();
	linear_q_offs->set_memorized_init(true);
	att_list.push_back(linear_q_offs);

	//	Attribute : Linear_sum_k
	Linear_sum_kAttrib	*linear_sum_k = new Linear_sum_kAttrib();
	Tango::UserDefaultAttrProp	linear_sum_k_prop;
	linear_sum_k_prop.set_description("Matjaz.....");
	linear_sum_k_prop.set_label("linear_sum_k");
	//	unit	not set for Linear_sum_k
	//	standard_unit	not set for Linear_sum_k
	//	display_unit	not set for Linear_sum_k
	//	format	not set for Linear_sum_k
	//	max_value	not set for Linear_sum_k
	//	min_value	not set for Linear_sum_k
	//	max_alarm	not set for Linear_sum_k
	//	min_alarm	not set for Linear_sum_k
	//	max_warning	not set for Linear_sum_k
	//	min_warning	not set for Linear_sum_k
	//	delta_t	not set for Linear_sum_k
	//	delta_val	not set for Linear_sum_k
	
	linear_sum_k->set_default_properties(linear_sum_k_prop);
	//	Not Polled
	linear_sum_k->set_disp_level(Tango::EXPERT);
	linear_sum_k->set_memorized();
	linear_sum_k->set_memorized_init(true);
	att_list.push_back(linear_sum_k);

	//	Attribute : Linear_sum_offs
	Linear_sum_offsAttrib	*linear_sum_offs = new Linear_sum_offsAttrib();
	Tango::UserDefaultAttrProp	linear_sum_offs_prop;
	linear_sum_offs_prop.set_description("Matjaz.....");
	linear_sum_offs_prop.set_label("linear_sum_offs");
	linear_sum_offs_prop.set_unit("nm");
	//	standard_unit	not set for Linear_sum_offs
	//	display_unit	not set for Linear_sum_offs
	//	format	not set for Linear_sum_offs
	//	max_value	not set for Linear_sum_offs
	//	min_value	not set for Linear_sum_offs
	//	max_alarm	not set for Linear_sum_offs
	//	min_alarm	not set for Linear_sum_offs
	//	max_warning	not set for Linear_sum_offs
	//	min_warning	not set for Linear_sum_offs
	//	delta_t	not set for Linear_sum_offs
	//	delta_val	not set for Linear_sum_offs
	
	linear_sum_offs->set_default_properties(linear_sum_offs_prop);
	//	Not Polled
	linear_sum_offs->set_disp_level(Tango::EXPERT);
	linear_sum_offs->set_memorized();
	linear_sum_offs->set_memorized_init(true);
	att_list.push_back(linear_sum_offs);

	//	Attribute : Signal_expansion
	Signal_expansionAttrib	*signal_expansion = new Signal_expansionAttrib();
	Tango::UserDefaultAttrProp	signal_expansion_prop;
	signal_expansion_prop.set_description("Matjaz.....");
	signal_expansion_prop.set_label("signal_expansion");
	//	unit	not set for Signal_expansion
	//	standard_unit	not set for Signal_expansion
	//	display_unit	not set for Signal_expansion
	//	format	not set for Signal_expansion
	//	max_value	not set for Signal_expansion
	//	min_value	not set for Signal_expansion
	//	max_alarm	not set for Signal_expansion
	//	min_alarm	not set for Signal_expansion
	//	max_warning	not set for Signal_expansion
	//	min_warning	not set for Signal_expansion
	//	delta_t	not set for Signal_expansion
	//	delta_val	not set for Signal_expansion
	
	signal_expansion->set_default_properties(signal_expansion_prop);
	//	Not Polled
	signal_expansion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(signal_expansion);

	//	Attribute : Interlock_enabled
	Interlock_enabledAttrib	*interlock_enabled = new Interlock_enabledAttrib();
	Tango::UserDefaultAttrProp	interlock_enabled_prop;
	interlock_enabled_prop.set_description("Matjaz.....");
	interlock_enabled_prop.set_label("interlock_enabled");
	//	unit	not set for Interlock_enabled
	//	standard_unit	not set for Interlock_enabled
	//	display_unit	not set for Interlock_enabled
	//	format	not set for Interlock_enabled
	//	max_value	not set for Interlock_enabled
	//	min_value	not set for Interlock_enabled
	//	max_alarm	not set for Interlock_enabled
	//	min_alarm	not set for Interlock_enabled
	//	max_warning	not set for Interlock_enabled
	//	min_warning	not set for Interlock_enabled
	//	delta_t	not set for Interlock_enabled
	//	delta_val	not set for Interlock_enabled
	
	interlock_enabled->set_default_properties(interlock_enabled_prop);
	//	Not Polled
	interlock_enabled->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(interlock_enabled);

	//	Attribute : Limit_min_x
	Limit_min_xAttrib	*limit_min_x = new Limit_min_xAttrib();
	Tango::UserDefaultAttrProp	limit_min_x_prop;
	limit_min_x_prop.set_description("Matjaz.....");
	limit_min_x_prop.set_label("limit_min_x");
	limit_min_x_prop.set_unit("nm");
	//	standard_unit	not set for Limit_min_x
	//	display_unit	not set for Limit_min_x
	//	format	not set for Limit_min_x
	//	max_value	not set for Limit_min_x
	//	min_value	not set for Limit_min_x
	//	max_alarm	not set for Limit_min_x
	//	min_alarm	not set for Limit_min_x
	//	max_warning	not set for Limit_min_x
	//	min_warning	not set for Limit_min_x
	//	delta_t	not set for Limit_min_x
	//	delta_val	not set for Limit_min_x
	
	limit_min_x->set_default_properties(limit_min_x_prop);
	//	Not Polled
	limit_min_x->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(limit_min_x);

	//	Attribute : Limit_min_y
	Limit_min_yAttrib	*limit_min_y = new Limit_min_yAttrib();
	Tango::UserDefaultAttrProp	limit_min_y_prop;
	limit_min_y_prop.set_description("Matjaz.....");
	limit_min_y_prop.set_label("limit_min_y");
	limit_min_y_prop.set_unit("nm");
	//	standard_unit	not set for Limit_min_y
	//	display_unit	not set for Limit_min_y
	//	format	not set for Limit_min_y
	//	max_value	not set for Limit_min_y
	//	min_value	not set for Limit_min_y
	//	max_alarm	not set for Limit_min_y
	//	min_alarm	not set for Limit_min_y
	//	max_warning	not set for Limit_min_y
	//	min_warning	not set for Limit_min_y
	//	delta_t	not set for Limit_min_y
	//	delta_val	not set for Limit_min_y
	
	limit_min_y->set_default_properties(limit_min_y_prop);
	//	Not Polled
	limit_min_y->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(limit_min_y);

	//	Attribute : Limit_max_x
	Limit_max_xAttrib	*limit_max_x = new Limit_max_xAttrib();
	Tango::UserDefaultAttrProp	limit_max_x_prop;
	limit_max_x_prop.set_description("Matjaz.....");
	limit_max_x_prop.set_label("limit_max_x");
	limit_max_x_prop.set_unit("nm");
	//	standard_unit	not set for Limit_max_x
	//	display_unit	not set for Limit_max_x
	//	format	not set for Limit_max_x
	//	max_value	not set for Limit_max_x
	//	min_value	not set for Limit_max_x
	//	max_alarm	not set for Limit_max_x
	//	min_alarm	not set for Limit_max_x
	//	max_warning	not set for Limit_max_x
	//	min_warning	not set for Limit_max_x
	//	delta_t	not set for Limit_max_x
	//	delta_val	not set for Limit_max_x
	
	limit_max_x->set_default_properties(limit_max_x_prop);
	//	Not Polled
	limit_max_x->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(limit_max_x);

	//	Attribute : Limit_max_y
	Limit_max_yAttrib	*limit_max_y = new Limit_max_yAttrib();
	Tango::UserDefaultAttrProp	limit_max_y_prop;
	limit_max_y_prop.set_description("Matjaz.....");
	limit_max_y_prop.set_label("limit_max_y");
	limit_max_y_prop.set_unit("nm");
	//	standard_unit	not set for Limit_max_y
	//	display_unit	not set for Limit_max_y
	//	format	not set for Limit_max_y
	//	max_value	not set for Limit_max_y
	//	min_value	not set for Limit_max_y
	//	max_alarm	not set for Limit_max_y
	//	min_alarm	not set for Limit_max_y
	//	max_warning	not set for Limit_max_y
	//	min_warning	not set for Limit_max_y
	//	delta_t	not set for Limit_max_y
	//	delta_val	not set for Limit_max_y
	
	limit_max_y->set_default_properties(limit_max_y_prop);
	//	Not Polled
	limit_max_y->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(limit_max_y);

	//	Attribute : Overflow_threshold
	Overflow_thresholdAttrib	*overflow_threshold = new Overflow_thresholdAttrib();
	Tango::UserDefaultAttrProp	overflow_threshold_prop;
	overflow_threshold_prop.set_description("Matjaz.....");
	overflow_threshold_prop.set_label("overflow_threshold");
	overflow_threshold_prop.set_unit("ADC counts");
	//	standard_unit	not set for Overflow_threshold
	//	display_unit	not set for Overflow_threshold
	//	format	not set for Overflow_threshold
	//	max_value	not set for Overflow_threshold
	//	min_value	not set for Overflow_threshold
	//	max_alarm	not set for Overflow_threshold
	//	min_alarm	not set for Overflow_threshold
	//	max_warning	not set for Overflow_threshold
	//	min_warning	not set for Overflow_threshold
	//	delta_t	not set for Overflow_threshold
	//	delta_val	not set for Overflow_threshold
	
	overflow_threshold->set_default_properties(overflow_threshold_prop);
	//	Not Polled
	overflow_threshold->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(overflow_threshold);

	//	Attribute : Interlock_status
	Interlock_statusAttrib	*interlock_status = new Interlock_statusAttrib();
	Tango::UserDefaultAttrProp	interlock_status_prop;
	interlock_status_prop.set_description("Matjaz.....");
	interlock_status_prop.set_label("interlock_status");
	//	unit	not set for Interlock_status
	//	standard_unit	not set for Interlock_status
	//	display_unit	not set for Interlock_status
	//	format	not set for Interlock_status
	//	max_value	not set for Interlock_status
	//	min_value	not set for Interlock_status
	//	max_alarm	not set for Interlock_status
	//	min_alarm	not set for Interlock_status
	//	max_warning	not set for Interlock_status
	//	min_warning	not set for Interlock_status
	//	delta_t	not set for Interlock_status
	//	delta_val	not set for Interlock_status
	
	interlock_status->set_default_properties(interlock_status_prop);
	//	Not Polled
	interlock_status->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(interlock_status);

	//	Attribute : Status_x
	Status_xAttrib	*status_x = new Status_xAttrib();
	Tango::UserDefaultAttrProp	status_x_prop;
	status_x_prop.set_description("Matjaz.....");
	status_x_prop.set_label("status_x");
	//	unit	not set for Status_x
	//	standard_unit	not set for Status_x
	//	display_unit	not set for Status_x
	//	format	not set for Status_x
	//	max_value	not set for Status_x
	//	min_value	not set for Status_x
	//	max_alarm	not set for Status_x
	//	min_alarm	not set for Status_x
	//	max_warning	not set for Status_x
	//	min_warning	not set for Status_x
	//	delta_t	not set for Status_x
	//	delta_val	not set for Status_x
	
	status_x->set_default_properties(status_x_prop);
	//	Not Polled
	status_x->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(status_x);

	//	Attribute : Status_y
	Status_yAttrib	*status_y = new Status_yAttrib();
	Tango::UserDefaultAttrProp	status_y_prop;
	status_y_prop.set_description("Matjaz.....");
	status_y_prop.set_label("status_y");
	//	unit	not set for Status_y
	//	standard_unit	not set for Status_y
	//	display_unit	not set for Status_y
	//	format	not set for Status_y
	//	max_value	not set for Status_y
	//	min_value	not set for Status_y
	//	max_alarm	not set for Status_y
	//	min_alarm	not set for Status_y
	//	max_warning	not set for Status_y
	//	min_warning	not set for Status_y
	//	delta_t	not set for Status_y
	//	delta_val	not set for Status_y
	
	status_y->set_default_properties(status_y_prop);
	//	Not Polled
	status_y->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(status_y);

	//	Attribute : Status_adc_overflow
	Status_adc_overflowAttrib	*status_adc_overflow = new Status_adc_overflowAttrib();
	Tango::UserDefaultAttrProp	status_adc_overflow_prop;
	status_adc_overflow_prop.set_description("Matjaz.....");
	status_adc_overflow_prop.set_label("status_adc_overflow");
	//	unit	not set for Status_adc_overflow
	//	standard_unit	not set for Status_adc_overflow
	//	display_unit	not set for Status_adc_overflow
	//	format	not set for Status_adc_overflow
	//	max_value	not set for Status_adc_overflow
	//	min_value	not set for Status_adc_overflow
	//	max_alarm	not set for Status_adc_overflow
	//	min_alarm	not set for Status_adc_overflow
	//	max_warning	not set for Status_adc_overflow
	//	min_warning	not set for Status_adc_overflow
	//	delta_t	not set for Status_adc_overflow
	//	delta_val	not set for Status_adc_overflow
	
	status_adc_overflow->set_default_properties(status_adc_overflow_prop);
	//	Not Polled
	status_adc_overflow->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(status_adc_overflow);

	//	Attribute : X
	XAttrib	*x = new XAttrib();
	Tango::UserDefaultAttrProp	x_prop;
	//	description	not set for X
	//	label	not set for X
	x_prop.set_unit("nm");
	//	standard_unit	not set for X
	//	display_unit	not set for X
	//	format	not set for X
	//	max_value	not set for X
	//	min_value	not set for X
	//	max_alarm	not set for X
	//	min_alarm	not set for X
	//	max_warning	not set for X
	//	min_warning	not set for X
	//	delta_t	not set for X
	//	delta_val	not set for X
	
	x->set_default_properties(x_prop);
	//	Not Polled
	x->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(x);

	//	Attribute : Y
	YAttrib	*y = new YAttrib();
	Tango::UserDefaultAttrProp	y_prop;
	//	description	not set for Y
	//	label	not set for Y
	y_prop.set_unit("nm");
	//	standard_unit	not set for Y
	//	display_unit	not set for Y
	//	format	not set for Y
	//	max_value	not set for Y
	//	min_value	not set for Y
	//	max_alarm	not set for Y
	//	min_alarm	not set for Y
	//	max_warning	not set for Y
	//	min_warning	not set for Y
	//	delta_t	not set for Y
	//	delta_val	not set for Y
	
	y->set_default_properties(y_prop);
	//	Not Polled
	y->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(y);

	//	Attribute : Sum
	SumAttrib	*sum = new SumAttrib();
	Tango::UserDefaultAttrProp	sum_prop;
	//	description	not set for Sum
	//	label	not set for Sum
	//	unit	not set for Sum
	//	standard_unit	not set for Sum
	//	display_unit	not set for Sum
	//	format	not set for Sum
	//	max_value	not set for Sum
	//	min_value	not set for Sum
	//	max_alarm	not set for Sum
	//	min_alarm	not set for Sum
	//	max_warning	not set for Sum
	//	min_warning	not set for Sum
	//	delta_t	not set for Sum
	//	delta_val	not set for Sum
	
	sum->set_default_properties(sum_prop);
	//	Not Polled
	sum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(sum);

	//	Attribute : EnableADC
	EnableADCAttrib	*enableadc = new EnableADCAttrib();
	Tango::UserDefaultAttrProp	enableadc_prop;
	//	description	not set for EnableADC
	//	label	not set for EnableADC
	//	unit	not set for EnableADC
	//	standard_unit	not set for EnableADC
	//	display_unit	not set for EnableADC
	//	format	not set for EnableADC
	//	max_value	not set for EnableADC
	//	min_value	not set for EnableADC
	//	max_alarm	not set for EnableADC
	//	min_alarm	not set for EnableADC
	//	max_warning	not set for EnableADC
	//	min_warning	not set for EnableADC
	//	delta_t	not set for EnableADC
	//	delta_val	not set for EnableADC
	
	enableadc->set_default_properties(enableadc_prop);
	//	Not Polled
	enableadc->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(enableadc);

	//	Attribute : Q
	QAttrib	*q = new QAttrib();
	Tango::UserDefaultAttrProp	q_prop;
	//	description	not set for Q
	//	label	not set for Q
	//	unit	not set for Q
	//	standard_unit	not set for Q
	//	display_unit	not set for Q
	//	format	not set for Q
	//	max_value	not set for Q
	//	min_value	not set for Q
	//	max_alarm	not set for Q
	//	min_alarm	not set for Q
	//	max_warning	not set for Q
	//	min_warning	not set for Q
	//	delta_t	not set for Q
	//	delta_val	not set for Q
	
	q->set_default_properties(q_prop);
	//	Not Polled
	q->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(q);

	//	Attribute : External_trigger_delay
	External_trigger_delayAttrib	*external_trigger_delay = new External_trigger_delayAttrib();
	Tango::UserDefaultAttrProp	external_trigger_delay_prop;
	external_trigger_delay_prop.set_description("Trigger signal is usually used to trigger acquisitions (except when synchronizing).Depending on the cable lengths and physical location of the processor module in theaccelerator, the trigger arrival to Libera Single Pass E units may be different.");
	external_trigger_delay_prop.set_label("ltim_trigger_offset");
	//	unit	not set for External_trigger_delay
	external_trigger_delay_prop.set_standard_unit("LMC unit");
	//	display_unit	not set for External_trigger_delay
	//	format	not set for External_trigger_delay
	//	max_value	not set for External_trigger_delay
	//	min_value	not set for External_trigger_delay
	//	max_alarm	not set for External_trigger_delay
	//	min_alarm	not set for External_trigger_delay
	//	max_warning	not set for External_trigger_delay
	//	min_warning	not set for External_trigger_delay
	//	delta_t	not set for External_trigger_delay
	//	delta_val	not set for External_trigger_delay
	
	external_trigger_delay->set_default_properties(external_trigger_delay_prop);
	//	Not Polled
	external_trigger_delay->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(external_trigger_delay);

	//	Attribute : Attenuation_id
	Attenuation_idAttrib	*attenuation_id = new Attenuation_idAttrib();
	Tango::UserDefaultAttrProp	attenuation_id_prop;
	attenuation_id_prop.set_description("Manual Gain control attenuation (0-31 dB)");
	attenuation_id_prop.set_label("attenuation_att_id");
	attenuation_id_prop.set_unit("dB");
	//	standard_unit	not set for Attenuation_id
	//	display_unit	not set for Attenuation_id
	//	format	not set for Attenuation_id
	//	max_value	not set for Attenuation_id
	//	min_value	not set for Attenuation_id
	//	max_alarm	not set for Attenuation_id
	//	min_alarm	not set for Attenuation_id
	//	max_warning	not set for Attenuation_id
	//	min_warning	not set for Attenuation_id
	//	delta_t	not set for Attenuation_id
	//	delta_val	not set for Attenuation_id
	
	attenuation_id->set_default_properties(attenuation_id_prop);
	//	Not Polled
	attenuation_id->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(attenuation_id);

	//	Attribute : Attenuation_mode
	Attenuation_modeAttrib	*attenuation_mode = new Attenuation_modeAttrib();
	Tango::UserDefaultAttrProp	attenuation_mode_prop;
	attenuation_mode_prop.set_description("Manual Gain control mode (mode/automatic)");
	attenuation_mode_prop.set_label("attenuation_mode");
	//	unit	not set for Attenuation_mode
	//	standard_unit	not set for Attenuation_mode
	//	display_unit	not set for Attenuation_mode
	//	format	not set for Attenuation_mode
	//	max_value	not set for Attenuation_mode
	//	min_value	not set for Attenuation_mode
	//	max_alarm	not set for Attenuation_mode
	//	min_alarm	not set for Attenuation_mode
	//	max_warning	not set for Attenuation_mode
	//	min_warning	not set for Attenuation_mode
	//	delta_t	not set for Attenuation_mode
	//	delta_val	not set for Attenuation_mode
	
	attenuation_mode->set_default_properties(attenuation_mode_prop);
	//	Not Polled
	attenuation_mode->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(attenuation_mode);

	//	Attribute : Bunch_Threshold
	Bunch_ThresholdAttrib	*bunch_threshold = new Bunch_ThresholdAttrib();
	Tango::UserDefaultAttrProp	bunch_threshold_prop;
	bunch_threshold_prop.set_description("Start point of the data processing");
	bunch_threshold_prop.set_label("dsp_control_bunch_thr1");
	//	unit	not set for Bunch_Threshold
	//	standard_unit	not set for Bunch_Threshold
	//	display_unit	not set for Bunch_Threshold
	//	format	not set for Bunch_Threshold
	//	max_value	not set for Bunch_Threshold
	//	min_value	not set for Bunch_Threshold
	//	max_alarm	not set for Bunch_Threshold
	//	min_alarm	not set for Bunch_Threshold
	//	max_warning	not set for Bunch_Threshold
	//	min_warning	not set for Bunch_Threshold
	//	delta_t	not set for Bunch_Threshold
	//	delta_val	not set for Bunch_Threshold
	
	bunch_threshold->set_default_properties(bunch_threshold_prop);
	//	Not Polled
	bunch_threshold->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(bunch_threshold);

	//	Attribute : ADCChannelA
	ADCChannelAAttrib	*adcchannela = new ADCChannelAAttrib();
	Tango::UserDefaultAttrProp	adcchannela_prop;
	adcchannela_prop.set_description("The A StripLine ADC buffer");
	adcchannela_prop.set_label("A ADC buffer");
	adcchannela_prop.set_unit("a.u");
	//	standard_unit	not set for ADCChannelA
	//	display_unit	not set for ADCChannelA
	adcchannela_prop.set_format("%6d");
	//	max_value	not set for ADCChannelA
	//	min_value	not set for ADCChannelA
	//	max_alarm	not set for ADCChannelA
	//	min_alarm	not set for ADCChannelA
	//	max_warning	not set for ADCChannelA
	//	min_warning	not set for ADCChannelA
	//	delta_t	not set for ADCChannelA
	//	delta_val	not set for ADCChannelA
	
	adcchannela->set_default_properties(adcchannela_prop);
	//	Not Polled
	adcchannela->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(adcchannela);

	//	Attribute : ADCChannelB
	ADCChannelBAttrib	*adcchannelb = new ADCChannelBAttrib();
	Tango::UserDefaultAttrProp	adcchannelb_prop;
	adcchannelb_prop.set_description("The B StripLine ADC buffer");
	adcchannelb_prop.set_label("B ADC buffer");
	adcchannelb_prop.set_unit("a.u");
	//	standard_unit	not set for ADCChannelB
	//	display_unit	not set for ADCChannelB
	adcchannelb_prop.set_format("%6d");
	//	max_value	not set for ADCChannelB
	//	min_value	not set for ADCChannelB
	//	max_alarm	not set for ADCChannelB
	//	min_alarm	not set for ADCChannelB
	//	max_warning	not set for ADCChannelB
	//	min_warning	not set for ADCChannelB
	//	delta_t	not set for ADCChannelB
	//	delta_val	not set for ADCChannelB
	
	adcchannelb->set_default_properties(adcchannelb_prop);
	//	Not Polled
	adcchannelb->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(adcchannelb);

	//	Attribute : ADCChannelC
	ADCChannelCAttrib	*adcchannelc = new ADCChannelCAttrib();
	Tango::UserDefaultAttrProp	adcchannelc_prop;
	adcchannelc_prop.set_description("The C StripLine ADC buffer");
	adcchannelc_prop.set_label("C ADC buffer");
	adcchannelc_prop.set_unit("a.u");
	//	standard_unit	not set for ADCChannelC
	//	display_unit	not set for ADCChannelC
	adcchannelc_prop.set_format("%6d");
	//	max_value	not set for ADCChannelC
	//	min_value	not set for ADCChannelC
	//	max_alarm	not set for ADCChannelC
	//	min_alarm	not set for ADCChannelC
	//	max_warning	not set for ADCChannelC
	//	min_warning	not set for ADCChannelC
	//	delta_t	not set for ADCChannelC
	//	delta_val	not set for ADCChannelC
	
	adcchannelc->set_default_properties(adcchannelc_prop);
	//	Not Polled
	adcchannelc->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(adcchannelc);

	//	Attribute : ADCChannelD
	ADCChannelDAttrib	*adcchanneld = new ADCChannelDAttrib();
	Tango::UserDefaultAttrProp	adcchanneld_prop;
	adcchanneld_prop.set_description("The D StripLine ADC buffer");
	adcchanneld_prop.set_label("D ADC buffer");
	adcchanneld_prop.set_unit("a.u");
	//	standard_unit	not set for ADCChannelD
	//	display_unit	not set for ADCChannelD
	adcchanneld_prop.set_format("%6d");
	//	max_value	not set for ADCChannelD
	//	min_value	not set for ADCChannelD
	//	max_alarm	not set for ADCChannelD
	//	min_alarm	not set for ADCChannelD
	//	max_warning	not set for ADCChannelD
	//	min_warning	not set for ADCChannelD
	//	delta_t	not set for ADCChannelD
	//	delta_val	not set for ADCChannelD
	
	adcchanneld->set_default_properties(adcchanneld_prop);
	//	Not Polled
	adcchanneld->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(adcchanneld);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::command_factory()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::command_factory_before


	//	Command Reset
	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCmd);

	//	Command ResetInterlockStatus
	ResetInterlockStatusClass	*pResetInterlockStatusCmd =
		new ResetInterlockStatusClass("ResetInterlockStatus",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetInterlockStatusCmd);

	//	Command MagicCommand
	MagicCommandClass	*pMagicCommandCmd =
		new MagicCommandClass("MagicCommand",
			Tango::DEV_STRING, Tango::DEVVAR_STRINGARRAY,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pMagicCommandCmd);

	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		LiberaSinglePassE *dev = static_cast<LiberaSinglePassE *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassEClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *LiberaSinglePassEClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(LiberaSinglePassEClass::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::Additional Methods
} //	namespace
