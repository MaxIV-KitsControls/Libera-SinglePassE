/*----- PROTECTED REGION ID(LiberaSinglePassEClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        LiberaSinglePassEClass.cpp
//
// description : C++ source for the LiberaSinglePassEClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the �name� once per process.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaSinglePassEClass.h>

/*----- PROTECTED REGION END -----*/

//-------------------------------------------------------------------
/**
 *	Create LiberaSinglePassEClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_LiberaSinglePassE_class(const char *name) {
		return LiberaSinglePassE_ns::LiberaSinglePassEClass::init(name);
	}
}


namespace LiberaSinglePassE_ns
{


//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
LiberaSinglePassEClass *LiberaSinglePassEClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::LiberaSinglePassEClass(string &s)
 * description : 	constructor for the LiberaSinglePassEClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
LiberaSinglePassEClass::LiberaSinglePassEClass(string &s):DeviceClass(s)
{
	cout2 << "Entering LiberaSinglePassEClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::constructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::constructor

	cout2 << "Leaving LiberaSinglePassEClass constructor" << endl;
}


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::~LiberaSinglePassEClass()
 * description : 	destructor for the LiberaSinglePassEClass
 */
//--------------------------------------------------------
LiberaSinglePassEClass::~LiberaSinglePassEClass()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
LiberaSinglePassEClass *LiberaSinglePassEClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new LiberaSinglePassEClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
LiberaSinglePassEClass *LiberaSinglePassEClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}




//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ResetClass::execute(): arrived" << endl;


	((static_cast<LiberaSinglePassE *>(device))->reset());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		ResetTriggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetTriggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ResetTriggerClass::execute(): arrived" << endl;


	((static_cast<LiberaSinglePassE *>(device))->reset_trigger());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		ResetInterlockStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetInterlockStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ResetInterlockStatusClass::execute(): arrived" << endl;


	((static_cast<LiberaSinglePassE *>(device))->reset_interlock_status());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		MagicCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MagicCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MagicCommandClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);
	return insert((static_cast<LiberaSinglePassE *>(device))->magic_command(argin));
}




//===================================================================
//	Properties management
//===================================================================

//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::get_class_property
 * description : 	Get the class property for specified name.
 *
 * @param	name  The property name
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::get_default_device_property()()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::get_default_class_property()()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaSinglePassEClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::get_class_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::get_class_property()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::get_class_property_before) ENABLED START -----*/

	//	Initialize class property data members

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::get_class_property_before

	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("ServiceTaskSleep"));
	cl_prop.push_back(Tango::DbDatum("DataTaskHeartbeat"));


	if (cl_prop.size()==0) return;	//	No property to read

	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract ServiceTaskSleep value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  serviceTaskSleep;
	else
	{
		//	Check default value for ServiceTaskSleep
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  serviceTaskSleep;
			cl_prop[i]  <<  serviceTaskSleep;
		}
	}
	//	Try to extract DataTaskHeartbeat value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dataTaskHeartbeat;
	else
	{
		//	Check default value for DataTaskHeartbeat
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dataTaskHeartbeat;
			cl_prop[i]  <<  dataTaskHeartbeat;
		}
	}

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::get_class_property_after) ENABLED START -----*/

	//	Check class property data members init

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::get_class_property_after

}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *	              For each property, add to wizard property name and description.
 *	              If default value has been set, add it to wizard property and.
 *	              store it in a DbDatum.
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "ServiceTaskSleep";
	prop_desc = "Sleep time (in mS) for the service task between libera boxes request";
	prop_def  = "2000`\n";
	vect_data.clear();
	vect_data.push_back("2000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DataTaskHeartbeat";
	prop_desc = "Heartbeat time (in mS) for the data task";
	prop_def  = "2000`\n";
	vect_data.clear();
	vect_data.push_back("2000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default Device Properties

	prop_name = "LiberaIpAddr";
	prop_desc = "Libera IP address";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "LiberaBoard";
	prop_desc = "The board name (and index) used by the Libera box for multi board setup";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Location";
	prop_desc = "The libera box physical place (TL1, BOOSTER,....)";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "ServiceTaskSleep";
	prop_desc = "Sleep time (in mS) for the class task between libera boxes request";
	prop_def  = "2000\n";
	vect_data.clear();
	vect_data.push_back("2000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "DataTaskHeartbeat";
	prop_desc = "Heartbeat time (in mS) for the data task";
	prop_def  = "2000\n";
	vect_data.clear();
	vect_data.push_back("2000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "BeamThreshold";
	prop_desc = "Threshold to decide if there is some beam at a given time  (at a given index in the ADC buffers)";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "PositionK";
	prop_desc = "Multiplicative coefficient to compute beam position";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "CurrentK";
	prop_desc = "Multiplicative coefficient to compute beam current";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "CurrentTimeOffset";
	prop_desc = "Time coefficient used in current computation";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Libera Brillance Single Pass E");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This Tango class is the interface of the Instrumentation Technologies (IT) Libera");
	str_desc.push_back("Brilliance Single Pass E equipment. This class supports only a subset of all the");
	str_desc.push_back("equipment features. It is the basic equipment for a Injection and Transfer Efficiency");
	str_desc.push_back("Measurement System");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("LiberaSinglePassE");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));

				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag

	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");

	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();

	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);

		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);

			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}




//===================================================================
//	Factory methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::device_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new LiberaSinglePassE(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		LiberaSinglePassE *dev = static_cast<LiberaSinglePassE *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::device_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::device_factory_after


}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *	              and store them in the attribute list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::attribute_factory_before


	//	Attribute : BufferSize
	BufferSizeAttrib	*buffersize = new BufferSizeAttrib();
	Tango::UserDefaultAttrProp	buffersize_prop;
	buffersize_prop.set_description("The Libera box ADC buffer size (between 10 and 8192)");
	buffersize_prop.set_label("Buffer Size");
	buffersize_prop.set_unit("samples");
	//	standard_unit	not set for	BufferSize
	//	display_unit	not set for	BufferSize
	buffersize_prop.set_format("%4d");
	buffersize_prop.set_max_value("8192");
	buffersize_prop.set_min_value("10");
	//	max_alarm	not set for	BufferSize
	//	min_alarm	not set for	BufferSize
	//	max_warning	not set for	BufferSize
	//	min_warning	not set for	BufferSize
	//	delta_t	not set for	BufferSize
	//	delta_val	not set for	BufferSize
	buffersize->set_default_properties(buffersize_prop);
	//	Not Polled
	buffersize->set_disp_level(Tango::OPERATOR);
	buffersize->set_memorized();
	buffersize->set_memorized_init(true);
	//	BufferSize does not fire change event
	//	BufferSize does not fire archive event
	//	BufferSize does not fire data_ready event
	att_list.push_back(buffersize);

	//	Attribute : AttenuationLevel
	AttenuationLevelAttrib	*attenuationlevel = new AttenuationLevelAttrib();
	Tango::UserDefaultAttrProp	attenuationlevel_prop;
	attenuationlevel_prop.set_description("The analog channels level. This attribute allows the user to tune the analog channels\nattenuator. The input is an index within a lookup table in the Libera box");
	attenuationlevel_prop.set_label("AttenuationLevel");
	attenuationlevel_prop.set_unit("dBm");
	//	standard_unit	not set for	AttenuationLevel
	//	display_unit	not set for	AttenuationLevel
	attenuationlevel_prop.set_format("%2d");
	attenuationlevel_prop.set_max_value("31");
	attenuationlevel_prop.set_min_value("0");
	//	max_alarm	not set for	AttenuationLevel
	//	min_alarm	not set for	AttenuationLevel
	//	max_warning	not set for	AttenuationLevel
	//	min_warning	not set for	AttenuationLevel
	//	delta_t	not set for	AttenuationLevel
	//	delta_val	not set for	AttenuationLevel
	attenuationlevel->set_default_properties(attenuationlevel_prop);
	//	Not Polled
	attenuationlevel->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	AttenuationLevel does not fire change event
	//	AttenuationLevel does not fire archive event
	//	AttenuationLevel does not fire data_ready event
	att_list.push_back(attenuationlevel);

	//	Attribute : TriggerCounter
	TriggerCounterAttrib	*triggercounter = new TriggerCounterAttrib();
	Tango::UserDefaultAttrProp	triggercounter_prop;
	triggercounter_prop.set_description("Trigger counter. Incremented at each trigger");
	triggercounter_prop.set_label("Trig. Counter");
	triggercounter_prop.set_unit(" ");
	triggercounter_prop.set_standard_unit(" ");
	//	display_unit	not set for	TriggerCounter
	triggercounter_prop.set_format("%d");
	//	max_value	not set for	TriggerCounter
	//	min_value	not set for	TriggerCounter
	//	max_alarm	not set for	TriggerCounter
	//	min_alarm	not set for	TriggerCounter
	//	max_warning	not set for	TriggerCounter
	//	min_warning	not set for	TriggerCounter
	//	delta_t	not set for	TriggerCounter
	//	delta_val	not set for	TriggerCounter
	triggercounter->set_default_properties(triggercounter_prop);
	//	Not Polled
	triggercounter->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	TriggerCounter does not fire change event
	//	TriggerCounter does not fire archive event
	//	TriggerCounter does not fire data_ready event
	att_list.push_back(triggercounter);

	//	Attribute : Fan1Speed
	Fan1SpeedAttrib	*fan1speed = new Fan1SpeedAttrib();
	Tango::UserDefaultAttrProp	fan1speed_prop;
	fan1speed_prop.set_description("First fan speed");
	fan1speed_prop.set_label("Fan.1 speed");
	fan1speed_prop.set_unit("rpm");
	//	standard_unit	not set for	Fan1Speed
	//	display_unit	not set for	Fan1Speed
	fan1speed_prop.set_format("%4d");
	//	max_value	not set for	Fan1Speed
	//	min_value	not set for	Fan1Speed
	//	max_alarm	not set for	Fan1Speed
	//	min_alarm	not set for	Fan1Speed
	//	max_warning	not set for	Fan1Speed
	//	min_warning	not set for	Fan1Speed
	//	delta_t	not set for	Fan1Speed
	//	delta_val	not set for	Fan1Speed
	fan1speed->set_default_properties(fan1speed_prop);
	//	Not Polled
	fan1speed->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Fan1Speed does not fire change event
	//	Fan1Speed does not fire archive event
	//	Fan1Speed does not fire data_ready event
	att_list.push_back(fan1speed);

	//	Attribute : Fan2Speed
	Fan2SpeedAttrib	*fan2speed = new Fan2SpeedAttrib();
	Tango::UserDefaultAttrProp	fan2speed_prop;
	fan2speed_prop.set_description("Second fan speed");
	fan2speed_prop.set_label("Fan.2 speed");
	fan2speed_prop.set_unit("rpm");
	fan2speed_prop.set_standard_unit(" ");
	//	display_unit	not set for	Fan2Speed
	fan2speed_prop.set_format("%4d");
	//	max_value	not set for	Fan2Speed
	//	min_value	not set for	Fan2Speed
	//	max_alarm	not set for	Fan2Speed
	//	min_alarm	not set for	Fan2Speed
	//	max_warning	not set for	Fan2Speed
	//	min_warning	not set for	Fan2Speed
	//	delta_t	not set for	Fan2Speed
	//	delta_val	not set for	Fan2Speed
	fan2speed->set_default_properties(fan2speed_prop);
	//	Not Polled
	fan2speed->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Fan2Speed does not fire change event
	//	Fan2Speed does not fire archive event
	//	Fan2Speed does not fire data_ready event
	att_list.push_back(fan2speed);

	//	Attribute : Temp1
	Temp1Attrib	*temp1 = new Temp1Attrib();
	Tango::UserDefaultAttrProp	temp1_prop;
	temp1_prop.set_description("The Libera box first temperature");
	temp1_prop.set_label("Temperature 1");
	temp1_prop.set_unit("C deg");
	//	standard_unit	not set for	Temp1
	//	display_unit	not set for	Temp1
	temp1_prop.set_format("%2d");
	//	max_value	not set for	Temp1
	//	min_value	not set for	Temp1
	temp1_prop.set_max_alarm("65");
	//	min_alarm	not set for	Temp1
	//	max_warning	not set for	Temp1
	//	min_warning	not set for	Temp1
	//	delta_t	not set for	Temp1
	//	delta_val	not set for	Temp1
	temp1->set_default_properties(temp1_prop);
	//	Not Polled
	temp1->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Temp1 does not fire change event
	//	Temp1 does not fire archive event
	//	Temp1 does not fire data_ready event
	att_list.push_back(temp1);

	//	Attribute : Temp2
	Temp2Attrib	*temp2 = new Temp2Attrib();
	Tango::UserDefaultAttrProp	temp2_prop;
	temp2_prop.set_description("The Libera box second temperature");
	temp2_prop.set_label("Temperature 2");
	temp2_prop.set_unit("C deg");
	//	standard_unit	not set for	Temp2
	//	display_unit	not set for	Temp2
	temp2_prop.set_format("%2d");
	//	max_value	not set for	Temp2
	//	min_value	not set for	Temp2
	temp2_prop.set_max_alarm("65");
	//	min_alarm	not set for	Temp2
	//	max_warning	not set for	Temp2
	//	min_warning	not set for	Temp2
	//	delta_t	not set for	Temp2
	//	delta_val	not set for	Temp2
	temp2->set_default_properties(temp2_prop);
	//	Not Polled
	temp2->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Temp2 does not fire change event
	//	Temp2 does not fire archive event
	//	Temp2 does not fire data_ready event
	att_list.push_back(temp2);

	//	Attribute : Temp3
	Temp3Attrib	*temp3 = new Temp3Attrib();
	Tango::UserDefaultAttrProp	temp3_prop;
	temp3_prop.set_description("The Libera box third temperature");
	temp3_prop.set_label("Temperature 3");
	temp3_prop.set_unit("C deg");
	//	standard_unit	not set for	Temp3
	//	display_unit	not set for	Temp3
	temp3_prop.set_format("%2d");
	//	max_value	not set for	Temp3
	//	min_value	not set for	Temp3
	temp3_prop.set_max_alarm("65");
	//	min_alarm	not set for	Temp3
	//	max_warning	not set for	Temp3
	//	min_warning	not set for	Temp3
	//	delta_t	not set for	Temp3
	//	delta_val	not set for	Temp3
	temp3->set_default_properties(temp3_prop);
	//	Not Polled
	temp3->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Temp3 does not fire change event
	//	Temp3 does not fire archive event
	//	Temp3 does not fire data_ready event
	att_list.push_back(temp3);

	//	Attribute : Calibration_ka
	Calibration_kaAttrib	*calibration_ka = new Calibration_kaAttrib();
	Tango::UserDefaultAttrProp	calibration_ka_prop;
	calibration_ka_prop.set_description("Matjaz.....");
	calibration_ka_prop.set_label("calibration_ka");
	//	unit	not set for	Calibration_ka
	//	standard_unit	not set for	Calibration_ka
	//	display_unit	not set for	Calibration_ka
	//	format	not set for	Calibration_ka
	//	max_value	not set for	Calibration_ka
	//	min_value	not set for	Calibration_ka
	//	max_alarm	not set for	Calibration_ka
	//	min_alarm	not set for	Calibration_ka
	//	max_warning	not set for	Calibration_ka
	//	min_warning	not set for	Calibration_ka
	//	delta_t	not set for	Calibration_ka
	//	delta_val	not set for	Calibration_ka
	calibration_ka->set_default_properties(calibration_ka_prop);
	//	Not Polled
	calibration_ka->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Calibration_ka does not fire change event
	//	Calibration_ka does not fire archive event
	//	Calibration_ka does not fire data_ready event
	att_list.push_back(calibration_ka);

	//	Attribute : Calibration_kb
	Calibration_kbAttrib	*calibration_kb = new Calibration_kbAttrib();
	Tango::UserDefaultAttrProp	calibration_kb_prop;
	calibration_kb_prop.set_description("Matjaz.....");
	calibration_kb_prop.set_label("calibration_kb");
	//	unit	not set for	Calibration_kb
	//	standard_unit	not set for	Calibration_kb
	//	display_unit	not set for	Calibration_kb
	//	format	not set for	Calibration_kb
	//	max_value	not set for	Calibration_kb
	//	min_value	not set for	Calibration_kb
	//	max_alarm	not set for	Calibration_kb
	//	min_alarm	not set for	Calibration_kb
	//	max_warning	not set for	Calibration_kb
	//	min_warning	not set for	Calibration_kb
	//	delta_t	not set for	Calibration_kb
	//	delta_val	not set for	Calibration_kb
	calibration_kb->set_default_properties(calibration_kb_prop);
	//	Not Polled
	calibration_kb->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Calibration_kb does not fire change event
	//	Calibration_kb does not fire archive event
	//	Calibration_kb does not fire data_ready event
	att_list.push_back(calibration_kb);

	//	Attribute : Calibration_kc
	Calibration_kcAttrib	*calibration_kc = new Calibration_kcAttrib();
	Tango::UserDefaultAttrProp	calibration_kc_prop;
	calibration_kc_prop.set_description("Matjaz.....");
	calibration_kc_prop.set_label("calibration_kc");
	//	unit	not set for	Calibration_kc
	//	standard_unit	not set for	Calibration_kc
	//	display_unit	not set for	Calibration_kc
	//	format	not set for	Calibration_kc
	//	max_value	not set for	Calibration_kc
	//	min_value	not set for	Calibration_kc
	//	max_alarm	not set for	Calibration_kc
	//	min_alarm	not set for	Calibration_kc
	//	max_warning	not set for	Calibration_kc
	//	min_warning	not set for	Calibration_kc
	//	delta_t	not set for	Calibration_kc
	//	delta_val	not set for	Calibration_kc
	calibration_kc->set_default_properties(calibration_kc_prop);
	//	Not Polled
	calibration_kc->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Calibration_kc does not fire change event
	//	Calibration_kc does not fire archive event
	//	Calibration_kc does not fire data_ready event
	att_list.push_back(calibration_kc);

	//	Attribute : Calibration_kd
	Calibration_kdAttrib	*calibration_kd = new Calibration_kdAttrib();
	Tango::UserDefaultAttrProp	calibration_kd_prop;
	calibration_kd_prop.set_description("Matjaz.....");
	calibration_kd_prop.set_label("calibration_kd");
	//	unit	not set for	Calibration_kd
	//	standard_unit	not set for	Calibration_kd
	//	display_unit	not set for	Calibration_kd
	//	format	not set for	Calibration_kd
	//	max_value	not set for	Calibration_kd
	//	min_value	not set for	Calibration_kd
	//	max_alarm	not set for	Calibration_kd
	//	min_alarm	not set for	Calibration_kd
	//	max_warning	not set for	Calibration_kd
	//	min_warning	not set for	Calibration_kd
	//	delta_t	not set for	Calibration_kd
	//	delta_val	not set for	Calibration_kd
	calibration_kd->set_default_properties(calibration_kd_prop);
	//	Not Polled
	calibration_kd->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Calibration_kd does not fire change event
	//	Calibration_kd does not fire archive event
	//	Calibration_kd does not fire data_ready event
	att_list.push_back(calibration_kd);

	//	Attribute : Linear_x_k
	Linear_x_kAttrib	*linear_x_k = new Linear_x_kAttrib();
	Tango::UserDefaultAttrProp	linear_x_k_prop;
	linear_x_k_prop.set_description("Matjaz.....");
	linear_x_k_prop.set_label("linear_x_k");
	//	unit	not set for	Linear_x_k
	//	standard_unit	not set for	Linear_x_k
	//	display_unit	not set for	Linear_x_k
	//	format	not set for	Linear_x_k
	//	max_value	not set for	Linear_x_k
	//	min_value	not set for	Linear_x_k
	//	max_alarm	not set for	Linear_x_k
	//	min_alarm	not set for	Linear_x_k
	//	max_warning	not set for	Linear_x_k
	//	min_warning	not set for	Linear_x_k
	//	delta_t	not set for	Linear_x_k
	//	delta_val	not set for	Linear_x_k
	linear_x_k->set_default_properties(linear_x_k_prop);
	//	Not Polled
	linear_x_k->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_x_k does not fire change event
	//	Linear_x_k does not fire archive event
	//	Linear_x_k does not fire data_ready event
	att_list.push_back(linear_x_k);

	//	Attribute : Linear_x_offs
	Linear_x_offsAttrib	*linear_x_offs = new Linear_x_offsAttrib();
	Tango::UserDefaultAttrProp	linear_x_offs_prop;
	linear_x_offs_prop.set_description("Matjaz.....");
	linear_x_offs_prop.set_label("linear_x_offs");
	linear_x_offs_prop.set_unit("nm");
	//	standard_unit	not set for	Linear_x_offs
	//	display_unit	not set for	Linear_x_offs
	//	format	not set for	Linear_x_offs
	//	max_value	not set for	Linear_x_offs
	//	min_value	not set for	Linear_x_offs
	//	max_alarm	not set for	Linear_x_offs
	//	min_alarm	not set for	Linear_x_offs
	//	max_warning	not set for	Linear_x_offs
	//	min_warning	not set for	Linear_x_offs
	//	delta_t	not set for	Linear_x_offs
	//	delta_val	not set for	Linear_x_offs
	linear_x_offs->set_default_properties(linear_x_offs_prop);
	//	Not Polled
	linear_x_offs->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_x_offs does not fire change event
	//	Linear_x_offs does not fire archive event
	//	Linear_x_offs does not fire data_ready event
	att_list.push_back(linear_x_offs);

	//	Attribute : Linear_y_k
	Linear_y_kAttrib	*linear_y_k = new Linear_y_kAttrib();
	Tango::UserDefaultAttrProp	linear_y_k_prop;
	linear_y_k_prop.set_description("Matjaz.....");
	linear_y_k_prop.set_label("linear_y_k");
	//	unit	not set for	Linear_y_k
	//	standard_unit	not set for	Linear_y_k
	//	display_unit	not set for	Linear_y_k
	//	format	not set for	Linear_y_k
	//	max_value	not set for	Linear_y_k
	//	min_value	not set for	Linear_y_k
	//	max_alarm	not set for	Linear_y_k
	//	min_alarm	not set for	Linear_y_k
	//	max_warning	not set for	Linear_y_k
	//	min_warning	not set for	Linear_y_k
	//	delta_t	not set for	Linear_y_k
	//	delta_val	not set for	Linear_y_k
	linear_y_k->set_default_properties(linear_y_k_prop);
	//	Not Polled
	linear_y_k->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_y_k does not fire change event
	//	Linear_y_k does not fire archive event
	//	Linear_y_k does not fire data_ready event
	att_list.push_back(linear_y_k);

	//	Attribute : Linear_y_offs
	Linear_y_offsAttrib	*linear_y_offs = new Linear_y_offsAttrib();
	Tango::UserDefaultAttrProp	linear_y_offs_prop;
	linear_y_offs_prop.set_description("Matjaz.....");
	linear_y_offs_prop.set_label("linear_y_offs");
	linear_y_offs_prop.set_unit("nm");
	//	standard_unit	not set for	Linear_y_offs
	//	display_unit	not set for	Linear_y_offs
	//	format	not set for	Linear_y_offs
	//	max_value	not set for	Linear_y_offs
	//	min_value	not set for	Linear_y_offs
	//	max_alarm	not set for	Linear_y_offs
	//	min_alarm	not set for	Linear_y_offs
	//	max_warning	not set for	Linear_y_offs
	//	min_warning	not set for	Linear_y_offs
	//	delta_t	not set for	Linear_y_offs
	//	delta_val	not set for	Linear_y_offs
	linear_y_offs->set_default_properties(linear_y_offs_prop);
	//	Not Polled
	linear_y_offs->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_y_offs does not fire change event
	//	Linear_y_offs does not fire archive event
	//	Linear_y_offs does not fire data_ready event
	att_list.push_back(linear_y_offs);

	//	Attribute : Linear_q_k
	Linear_q_kAttrib	*linear_q_k = new Linear_q_kAttrib();
	Tango::UserDefaultAttrProp	linear_q_k_prop;
	linear_q_k_prop.set_description("Matjaz.....");
	linear_q_k_prop.set_label("linear_q_k");
	//	unit	not set for	Linear_q_k
	//	standard_unit	not set for	Linear_q_k
	//	display_unit	not set for	Linear_q_k
	//	format	not set for	Linear_q_k
	//	max_value	not set for	Linear_q_k
	//	min_value	not set for	Linear_q_k
	//	max_alarm	not set for	Linear_q_k
	//	min_alarm	not set for	Linear_q_k
	//	max_warning	not set for	Linear_q_k
	//	min_warning	not set for	Linear_q_k
	//	delta_t	not set for	Linear_q_k
	//	delta_val	not set for	Linear_q_k
	linear_q_k->set_default_properties(linear_q_k_prop);
	//	Not Polled
	linear_q_k->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_q_k does not fire change event
	//	Linear_q_k does not fire archive event
	//	Linear_q_k does not fire data_ready event
	att_list.push_back(linear_q_k);

	//	Attribute : Linear_q_offs
	Linear_q_offsAttrib	*linear_q_offs = new Linear_q_offsAttrib();
	Tango::UserDefaultAttrProp	linear_q_offs_prop;
	linear_q_offs_prop.set_description("Matjaz.....");
	linear_q_offs_prop.set_label("linear_q_offs");
	linear_q_offs_prop.set_unit("nano meters");
	//	standard_unit	not set for	Linear_q_offs
	//	display_unit	not set for	Linear_q_offs
	//	format	not set for	Linear_q_offs
	//	max_value	not set for	Linear_q_offs
	//	min_value	not set for	Linear_q_offs
	//	max_alarm	not set for	Linear_q_offs
	//	min_alarm	not set for	Linear_q_offs
	//	max_warning	not set for	Linear_q_offs
	//	min_warning	not set for	Linear_q_offs
	//	delta_t	not set for	Linear_q_offs
	//	delta_val	not set for	Linear_q_offs
	linear_q_offs->set_default_properties(linear_q_offs_prop);
	//	Not Polled
	linear_q_offs->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_q_offs does not fire change event
	//	Linear_q_offs does not fire archive event
	//	Linear_q_offs does not fire data_ready event
	att_list.push_back(linear_q_offs);

	//	Attribute : Linear_sum_k
	Linear_sum_kAttrib	*linear_sum_k = new Linear_sum_kAttrib();
	Tango::UserDefaultAttrProp	linear_sum_k_prop;
	linear_sum_k_prop.set_description("Matjaz.....");
	linear_sum_k_prop.set_label("linear_sum_k");
	//	unit	not set for	Linear_sum_k
	//	standard_unit	not set for	Linear_sum_k
	//	display_unit	not set for	Linear_sum_k
	//	format	not set for	Linear_sum_k
	//	max_value	not set for	Linear_sum_k
	//	min_value	not set for	Linear_sum_k
	//	max_alarm	not set for	Linear_sum_k
	//	min_alarm	not set for	Linear_sum_k
	//	max_warning	not set for	Linear_sum_k
	//	min_warning	not set for	Linear_sum_k
	//	delta_t	not set for	Linear_sum_k
	//	delta_val	not set for	Linear_sum_k
	linear_sum_k->set_default_properties(linear_sum_k_prop);
	//	Not Polled
	linear_sum_k->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_sum_k does not fire change event
	//	Linear_sum_k does not fire archive event
	//	Linear_sum_k does not fire data_ready event
	att_list.push_back(linear_sum_k);

	//	Attribute : Linear_sum_offs
	Linear_sum_offsAttrib	*linear_sum_offs = new Linear_sum_offsAttrib();
	Tango::UserDefaultAttrProp	linear_sum_offs_prop;
	linear_sum_offs_prop.set_description("Matjaz.....");
	linear_sum_offs_prop.set_label("linear_sum_offs");
	linear_sum_offs_prop.set_unit("nm");
	//	standard_unit	not set for	Linear_sum_offs
	//	display_unit	not set for	Linear_sum_offs
	//	format	not set for	Linear_sum_offs
	//	max_value	not set for	Linear_sum_offs
	//	min_value	not set for	Linear_sum_offs
	//	max_alarm	not set for	Linear_sum_offs
	//	min_alarm	not set for	Linear_sum_offs
	//	max_warning	not set for	Linear_sum_offs
	//	min_warning	not set for	Linear_sum_offs
	//	delta_t	not set for	Linear_sum_offs
	//	delta_val	not set for	Linear_sum_offs
	linear_sum_offs->set_default_properties(linear_sum_offs_prop);
	//	Not Polled
	linear_sum_offs->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Linear_sum_offs does not fire change event
	//	Linear_sum_offs does not fire archive event
	//	Linear_sum_offs does not fire data_ready event
	att_list.push_back(linear_sum_offs);

	//	Attribute : Signal_expansion
	Signal_expansionAttrib	*signal_expansion = new Signal_expansionAttrib();
	Tango::UserDefaultAttrProp	signal_expansion_prop;
	signal_expansion_prop.set_description("Matjaz.....");
	signal_expansion_prop.set_label("signal_expansion");
	//	unit	not set for	Signal_expansion
	//	standard_unit	not set for	Signal_expansion
	//	display_unit	not set for	Signal_expansion
	//	format	not set for	Signal_expansion
	//	max_value	not set for	Signal_expansion
	//	min_value	not set for	Signal_expansion
	//	max_alarm	not set for	Signal_expansion
	//	min_alarm	not set for	Signal_expansion
	//	max_warning	not set for	Signal_expansion
	//	min_warning	not set for	Signal_expansion
	//	delta_t	not set for	Signal_expansion
	//	delta_val	not set for	Signal_expansion
	signal_expansion->set_default_properties(signal_expansion_prop);
	//	Not Polled
	signal_expansion->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Signal_expansion does not fire change event
	//	Signal_expansion does not fire archive event
	//	Signal_expansion does not fire data_ready event
	att_list.push_back(signal_expansion);

	//	Attribute : Interlock_enabled
	Interlock_enabledAttrib	*interlock_enabled = new Interlock_enabledAttrib();
	Tango::UserDefaultAttrProp	interlock_enabled_prop;
	interlock_enabled_prop.set_description("Matjaz.....");
	interlock_enabled_prop.set_label("interlock_enabled");
	//	unit	not set for	Interlock_enabled
	//	standard_unit	not set for	Interlock_enabled
	//	display_unit	not set for	Interlock_enabled
	//	format	not set for	Interlock_enabled
	//	max_value	not set for	Interlock_enabled
	//	min_value	not set for	Interlock_enabled
	//	max_alarm	not set for	Interlock_enabled
	//	min_alarm	not set for	Interlock_enabled
	//	max_warning	not set for	Interlock_enabled
	//	min_warning	not set for	Interlock_enabled
	//	delta_t	not set for	Interlock_enabled
	//	delta_val	not set for	Interlock_enabled
	interlock_enabled->set_default_properties(interlock_enabled_prop);
	//	Not Polled
	interlock_enabled->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Interlock_enabled does not fire change event
	//	Interlock_enabled does not fire archive event
	//	Interlock_enabled does not fire data_ready event
	att_list.push_back(interlock_enabled);

	//	Attribute : Limit_min_x
	Limit_min_xAttrib	*limit_min_x = new Limit_min_xAttrib();
	Tango::UserDefaultAttrProp	limit_min_x_prop;
	limit_min_x_prop.set_description("Matjaz.....");
	limit_min_x_prop.set_label("limit_min_x");
	limit_min_x_prop.set_unit("nm");
	//	standard_unit	not set for	Limit_min_x
	//	display_unit	not set for	Limit_min_x
	//	format	not set for	Limit_min_x
	//	max_value	not set for	Limit_min_x
	//	min_value	not set for	Limit_min_x
	//	max_alarm	not set for	Limit_min_x
	//	min_alarm	not set for	Limit_min_x
	//	max_warning	not set for	Limit_min_x
	//	min_warning	not set for	Limit_min_x
	//	delta_t	not set for	Limit_min_x
	//	delta_val	not set for	Limit_min_x
	limit_min_x->set_default_properties(limit_min_x_prop);
	//	Not Polled
	limit_min_x->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Limit_min_x does not fire change event
	//	Limit_min_x does not fire archive event
	//	Limit_min_x does not fire data_ready event
	att_list.push_back(limit_min_x);

	//	Attribute : Limit_min_y
	Limit_min_yAttrib	*limit_min_y = new Limit_min_yAttrib();
	Tango::UserDefaultAttrProp	limit_min_y_prop;
	limit_min_y_prop.set_description("Matjaz.....");
	limit_min_y_prop.set_label("limit_min_y");
	limit_min_y_prop.set_unit("nm");
	//	standard_unit	not set for	Limit_min_y
	//	display_unit	not set for	Limit_min_y
	//	format	not set for	Limit_min_y
	//	max_value	not set for	Limit_min_y
	//	min_value	not set for	Limit_min_y
	//	max_alarm	not set for	Limit_min_y
	//	min_alarm	not set for	Limit_min_y
	//	max_warning	not set for	Limit_min_y
	//	min_warning	not set for	Limit_min_y
	//	delta_t	not set for	Limit_min_y
	//	delta_val	not set for	Limit_min_y
	limit_min_y->set_default_properties(limit_min_y_prop);
	//	Not Polled
	limit_min_y->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Limit_min_y does not fire change event
	//	Limit_min_y does not fire archive event
	//	Limit_min_y does not fire data_ready event
	att_list.push_back(limit_min_y);

	//	Attribute : Limit_max_x
	Limit_max_xAttrib	*limit_max_x = new Limit_max_xAttrib();
	Tango::UserDefaultAttrProp	limit_max_x_prop;
	limit_max_x_prop.set_description("Matjaz.....");
	limit_max_x_prop.set_label("limit_max_x");
	limit_max_x_prop.set_unit("nm");
	//	standard_unit	not set for	Limit_max_x
	//	display_unit	not set for	Limit_max_x
	//	format	not set for	Limit_max_x
	//	max_value	not set for	Limit_max_x
	//	min_value	not set for	Limit_max_x
	//	max_alarm	not set for	Limit_max_x
	//	min_alarm	not set for	Limit_max_x
	//	max_warning	not set for	Limit_max_x
	//	min_warning	not set for	Limit_max_x
	//	delta_t	not set for	Limit_max_x
	//	delta_val	not set for	Limit_max_x
	limit_max_x->set_default_properties(limit_max_x_prop);
	//	Not Polled
	limit_max_x->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Limit_max_x does not fire change event
	//	Limit_max_x does not fire archive event
	//	Limit_max_x does not fire data_ready event
	att_list.push_back(limit_max_x);

	//	Attribute : Limit_max_y
	Limit_max_yAttrib	*limit_max_y = new Limit_max_yAttrib();
	Tango::UserDefaultAttrProp	limit_max_y_prop;
	limit_max_y_prop.set_description("Matjaz.....");
	limit_max_y_prop.set_label("limit_max_y");
	limit_max_y_prop.set_unit("nm");
	//	standard_unit	not set for	Limit_max_y
	//	display_unit	not set for	Limit_max_y
	//	format	not set for	Limit_max_y
	//	max_value	not set for	Limit_max_y
	//	min_value	not set for	Limit_max_y
	//	max_alarm	not set for	Limit_max_y
	//	min_alarm	not set for	Limit_max_y
	//	max_warning	not set for	Limit_max_y
	//	min_warning	not set for	Limit_max_y
	//	delta_t	not set for	Limit_max_y
	//	delta_val	not set for	Limit_max_y
	limit_max_y->set_default_properties(limit_max_y_prop);
	//	Not Polled
	limit_max_y->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Limit_max_y does not fire change event
	//	Limit_max_y does not fire archive event
	//	Limit_max_y does not fire data_ready event
	att_list.push_back(limit_max_y);

	//	Attribute : Overflow_threshold
	Overflow_thresholdAttrib	*overflow_threshold = new Overflow_thresholdAttrib();
	Tango::UserDefaultAttrProp	overflow_threshold_prop;
	overflow_threshold_prop.set_description("Matjaz.....");
	overflow_threshold_prop.set_label("overflow_threshold");
	overflow_threshold_prop.set_unit("ADC counts");
	//	standard_unit	not set for	Overflow_threshold
	//	display_unit	not set for	Overflow_threshold
	//	format	not set for	Overflow_threshold
	//	max_value	not set for	Overflow_threshold
	//	min_value	not set for	Overflow_threshold
	//	max_alarm	not set for	Overflow_threshold
	//	min_alarm	not set for	Overflow_threshold
	//	max_warning	not set for	Overflow_threshold
	//	min_warning	not set for	Overflow_threshold
	//	delta_t	not set for	Overflow_threshold
	//	delta_val	not set for	Overflow_threshold
	overflow_threshold->set_default_properties(overflow_threshold_prop);
	//	Not Polled
	overflow_threshold->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Overflow_threshold does not fire change event
	//	Overflow_threshold does not fire archive event
	//	Overflow_threshold does not fire data_ready event
	att_list.push_back(overflow_threshold);

	//	Attribute : Interlock_status
	Interlock_statusAttrib	*interlock_status = new Interlock_statusAttrib();
	Tango::UserDefaultAttrProp	interlock_status_prop;
	interlock_status_prop.set_description("Matjaz.....");
	interlock_status_prop.set_label("interlock_status");
	//	unit	not set for	Interlock_status
	//	standard_unit	not set for	Interlock_status
	//	display_unit	not set for	Interlock_status
	//	format	not set for	Interlock_status
	//	max_value	not set for	Interlock_status
	//	min_value	not set for	Interlock_status
	//	max_alarm	not set for	Interlock_status
	//	min_alarm	not set for	Interlock_status
	//	max_warning	not set for	Interlock_status
	//	min_warning	not set for	Interlock_status
	//	delta_t	not set for	Interlock_status
	//	delta_val	not set for	Interlock_status
	interlock_status->set_default_properties(interlock_status_prop);
	//	Not Polled
	interlock_status->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Interlock_status does not fire change event
	//	Interlock_status does not fire archive event
	//	Interlock_status does not fire data_ready event
	att_list.push_back(interlock_status);

	//	Attribute : Status_x
	Status_xAttrib	*status_x = new Status_xAttrib();
	Tango::UserDefaultAttrProp	status_x_prop;
	status_x_prop.set_description("Matjaz.....");
	status_x_prop.set_label("status_x");
	//	unit	not set for	Status_x
	//	standard_unit	not set for	Status_x
	//	display_unit	not set for	Status_x
	//	format	not set for	Status_x
	//	max_value	not set for	Status_x
	//	min_value	not set for	Status_x
	//	max_alarm	not set for	Status_x
	//	min_alarm	not set for	Status_x
	//	max_warning	not set for	Status_x
	//	min_warning	not set for	Status_x
	//	delta_t	not set for	Status_x
	//	delta_val	not set for	Status_x
	status_x->set_default_properties(status_x_prop);
	//	Not Polled
	status_x->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Status_x does not fire change event
	//	Status_x does not fire archive event
	//	Status_x does not fire data_ready event
	att_list.push_back(status_x);

	//	Attribute : Status_y
	Status_yAttrib	*status_y = new Status_yAttrib();
	Tango::UserDefaultAttrProp	status_y_prop;
	status_y_prop.set_description("Matjaz.....");
	status_y_prop.set_label("status_y");
	//	unit	not set for	Status_y
	//	standard_unit	not set for	Status_y
	//	display_unit	not set for	Status_y
	//	format	not set for	Status_y
	//	max_value	not set for	Status_y
	//	min_value	not set for	Status_y
	//	max_alarm	not set for	Status_y
	//	min_alarm	not set for	Status_y
	//	max_warning	not set for	Status_y
	//	min_warning	not set for	Status_y
	//	delta_t	not set for	Status_y
	//	delta_val	not set for	Status_y
	status_y->set_default_properties(status_y_prop);
	//	Not Polled
	status_y->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Status_y does not fire change event
	//	Status_y does not fire archive event
	//	Status_y does not fire data_ready event
	att_list.push_back(status_y);

	//	Attribute : Status_adc_overflow
	Status_adc_overflowAttrib	*status_adc_overflow = new Status_adc_overflowAttrib();
	Tango::UserDefaultAttrProp	status_adc_overflow_prop;
	status_adc_overflow_prop.set_description("Matjaz.....");
	status_adc_overflow_prop.set_label("status_adc_overflow");
	//	unit	not set for	Status_adc_overflow
	//	standard_unit	not set for	Status_adc_overflow
	//	display_unit	not set for	Status_adc_overflow
	//	format	not set for	Status_adc_overflow
	//	max_value	not set for	Status_adc_overflow
	//	min_value	not set for	Status_adc_overflow
	//	max_alarm	not set for	Status_adc_overflow
	//	min_alarm	not set for	Status_adc_overflow
	//	max_warning	not set for	Status_adc_overflow
	//	min_warning	not set for	Status_adc_overflow
	//	delta_t	not set for	Status_adc_overflow
	//	delta_val	not set for	Status_adc_overflow
	status_adc_overflow->set_default_properties(status_adc_overflow_prop);
	//	Not Polled
	status_adc_overflow->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Status_adc_overflow does not fire change event
	//	Status_adc_overflow does not fire archive event
	//	Status_adc_overflow does not fire data_ready event
	att_list.push_back(status_adc_overflow);

	//	Attribute : A
	AAttrib	*a = new AAttrib();
	Tango::UserDefaultAttrProp	a_prop;
	a_prop.set_description("The A StripLine ADC buffer");
	a_prop.set_label("A ADC buffer");
	a_prop.set_unit("a.u");
	//	standard_unit	not set for	A
	//	display_unit	not set for	A
	a_prop.set_format("%6d");
	//	max_value	not set for	A
	//	min_value	not set for	A
	//	max_alarm	not set for	A
	//	min_alarm	not set for	A
	//	max_warning	not set for	A
	//	min_warning	not set for	A
	//	delta_t	not set for	A
	//	delta_val	not set for	A
	a->set_default_properties(a_prop);
	//	Not Polled
	a->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	A does not fire change event
	//	A does not fire archive event
	//	A does not fire data_ready event
	att_list.push_back(a);

	//	Attribute : B
	BAttrib	*b = new BAttrib();
	Tango::UserDefaultAttrProp	b_prop;
	b_prop.set_description("The B StripLine ADC buffer");
	b_prop.set_label("B ADC buffer");
	b_prop.set_unit("a.u");
	//	standard_unit	not set for	B
	//	display_unit	not set for	B
	b_prop.set_format("%6d");
	//	max_value	not set for	B
	//	min_value	not set for	B
	//	max_alarm	not set for	B
	//	min_alarm	not set for	B
	//	max_warning	not set for	B
	//	min_warning	not set for	B
	//	delta_t	not set for	B
	//	delta_val	not set for	B
	b->set_default_properties(b_prop);
	//	Not Polled
	b->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	B does not fire change event
	//	B does not fire archive event
	//	B does not fire data_ready event
	att_list.push_back(b);

	//	Attribute : C
	CAttrib	*c = new CAttrib();
	Tango::UserDefaultAttrProp	c_prop;
	c_prop.set_description("The C StripLine ADC buffer");
	c_prop.set_label("C ADC buffer");
	c_prop.set_unit("a.u");
	//	standard_unit	not set for	C
	//	display_unit	not set for	C
	c_prop.set_format("%6d");
	//	max_value	not set for	C
	//	min_value	not set for	C
	//	max_alarm	not set for	C
	//	min_alarm	not set for	C
	//	max_warning	not set for	C
	//	min_warning	not set for	C
	//	delta_t	not set for	C
	//	delta_val	not set for	C
	c->set_default_properties(c_prop);
	//	Not Polled
	c->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	C does not fire change event
	//	C does not fire archive event
	//	C does not fire data_ready event
	att_list.push_back(c);

	//	Attribute : D
	DAttrib	*d = new DAttrib();
	Tango::UserDefaultAttrProp	d_prop;
	d_prop.set_description("The D StripLine ADC buffer");
	d_prop.set_label("D ADC buffer");
	d_prop.set_unit("a.u");
	//	standard_unit	not set for	D
	//	display_unit	not set for	D
	d_prop.set_format("%6d");
	//	max_value	not set for	D
	//	min_value	not set for	D
	//	max_alarm	not set for	D
	//	min_alarm	not set for	D
	//	max_warning	not set for	D
	//	min_warning	not set for	D
	//	delta_t	not set for	D
	//	delta_val	not set for	D
	d->set_default_properties(d_prop);
	//	Not Polled
	d->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	D does not fire change event
	//	D does not fire archive event
	//	D does not fire data_ready event
	att_list.push_back(d);

	//	Attribute : AT
	ATAttrib	*at = new ATAttrib();
	Tango::UserDefaultAttrProp	at_prop;
	at_prop.set_description("The A StripLine ADC buffer after some computation:\nsquare - double averaging filter - square root");
	at_prop.set_label("Computed A ADC buffer");
	at_prop.set_unit("a.u");
	//	standard_unit	not set for	AT
	//	display_unit	not set for	AT
	at_prop.set_format("%8.2f");
	//	max_value	not set for	AT
	//	min_value	not set for	AT
	//	max_alarm	not set for	AT
	//	min_alarm	not set for	AT
	//	max_warning	not set for	AT
	//	min_warning	not set for	AT
	//	delta_t	not set for	AT
	//	delta_val	not set for	AT
	at->set_default_properties(at_prop);
	//	Not Polled
	at->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	AT does not fire change event
	//	AT does not fire archive event
	//	AT does not fire data_ready event
	att_list.push_back(at);

	//	Attribute : BT
	BTAttrib	*bt = new BTAttrib();
	Tango::UserDefaultAttrProp	bt_prop;
	bt_prop.set_description("The B StripLine ADC buffer after some computation:\nsquare - double averaging filter - square root");
	bt_prop.set_label("Computed B ADC buffer");
	bt_prop.set_unit("a.u");
	//	standard_unit	not set for	BT
	//	display_unit	not set for	BT
	bt_prop.set_format("%8.2f");
	//	max_value	not set for	BT
	//	min_value	not set for	BT
	//	max_alarm	not set for	BT
	//	min_alarm	not set for	BT
	//	max_warning	not set for	BT
	//	min_warning	not set for	BT
	//	delta_t	not set for	BT
	//	delta_val	not set for	BT
	bt->set_default_properties(bt_prop);
	//	Not Polled
	bt->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	BT does not fire change event
	//	BT does not fire archive event
	//	BT does not fire data_ready event
	att_list.push_back(bt);

	//	Attribute : CT
	CTAttrib	*ct = new CTAttrib();
	Tango::UserDefaultAttrProp	ct_prop;
	ct_prop.set_description("The C StripLine ADC buffer after some computation:\nsquare - double averaging filter - square root");
	ct_prop.set_label("Computed C ADC buffer");
	ct_prop.set_unit("a.u");
	//	standard_unit	not set for	CT
	//	display_unit	not set for	CT
	ct_prop.set_format("%8.2f");
	//	max_value	not set for	CT
	//	min_value	not set for	CT
	//	max_alarm	not set for	CT
	//	min_alarm	not set for	CT
	//	max_warning	not set for	CT
	//	min_warning	not set for	CT
	//	delta_t	not set for	CT
	//	delta_val	not set for	CT
	ct->set_default_properties(ct_prop);
	//	Not Polled
	ct->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	CT does not fire change event
	//	CT does not fire archive event
	//	CT does not fire data_ready event
	att_list.push_back(ct);

	//	Attribute : DT
	DTAttrib	*dt = new DTAttrib();
	Tango::UserDefaultAttrProp	dt_prop;
	dt_prop.set_description("The D StripLine ADC buffer after some computation:\nsquare - double averaging filter - square root");
	dt_prop.set_label("Computed D ADC buffer");
	dt_prop.set_unit("a.u");
	//	standard_unit	not set for	DT
	//	display_unit	not set for	DT
	dt_prop.set_format("%8.2f");
	//	max_value	not set for	DT
	//	min_value	not set for	DT
	//	max_alarm	not set for	DT
	//	min_alarm	not set for	DT
	//	max_warning	not set for	DT
	//	min_warning	not set for	DT
	//	delta_t	not set for	DT
	//	delta_val	not set for	DT
	dt->set_default_properties(dt_prop);
	//	Not Polled
	dt->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	DT does not fire change event
	//	DT does not fire archive event
	//	DT does not fire data_ready event
	att_list.push_back(dt);

	//	Attribute : Yposition
	YpositionAttrib	*yposition = new YpositionAttrib();
	Tango::UserDefaultAttrProp	yposition_prop;
	yposition_prop.set_description("Beam Y position (vertical)");
	yposition_prop.set_label("Beam Y position");
	yposition_prop.set_unit("mm");
	yposition_prop.set_standard_unit("0.001");
	//	display_unit	not set for	Yposition
	yposition_prop.set_format("%6.2f");
	//	max_value	not set for	Yposition
	//	min_value	not set for	Yposition
	//	max_alarm	not set for	Yposition
	//	min_alarm	not set for	Yposition
	//	max_warning	not set for	Yposition
	//	min_warning	not set for	Yposition
	//	delta_t	not set for	Yposition
	//	delta_val	not set for	Yposition
	yposition->set_default_properties(yposition_prop);
	//	Not Polled
	yposition->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Yposition does not fire change event
	//	Yposition does not fire archive event
	//	Yposition does not fire data_ready event
	att_list.push_back(yposition);

	//	Attribute : Xposition
	XpositionAttrib	*xposition = new XpositionAttrib();
	Tango::UserDefaultAttrProp	xposition_prop;
	xposition_prop.set_description("Beam X position (horizontal)");
	xposition_prop.set_label("Beam X position");
	xposition_prop.set_unit("mm");
	xposition_prop.set_standard_unit("0.001");
	//	display_unit	not set for	Xposition
	xposition_prop.set_format("%6.2f");
	//	max_value	not set for	Xposition
	//	min_value	not set for	Xposition
	//	max_alarm	not set for	Xposition
	//	min_alarm	not set for	Xposition
	//	max_warning	not set for	Xposition
	//	min_warning	not set for	Xposition
	//	delta_t	not set for	Xposition
	//	delta_val	not set for	Xposition
	xposition->set_default_properties(xposition_prop);
	//	Not Polled
	xposition->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Xposition does not fire change event
	//	Xposition does not fire archive event
	//	Xposition does not fire data_ready event
	att_list.push_back(xposition);

	//	Attribute : Current
	CurrentAttrib	*current = new CurrentAttrib();
	Tango::UserDefaultAttrProp	current_prop;
	current_prop.set_description("Beam current computed from strip lines data");
	current_prop.set_label("Computed beam current");
	current_prop.set_unit("mA");
	current_prop.set_standard_unit("0.001");
	//	display_unit	not set for	Current
	current_prop.set_format("%6.2f");
	//	max_value	not set for	Current
	//	min_value	not set for	Current
	//	max_alarm	not set for	Current
	//	min_alarm	not set for	Current
	//	max_warning	not set for	Current
	//	min_warning	not set for	Current
	//	delta_t	not set for	Current
	//	delta_val	not set for	Current
	current->set_default_properties(current_prop);
	//	Not Polled
	current->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Current does not fire change event
	//	Current does not fire archive event
	//	Current does not fire data_ready event
	att_list.push_back(current);

	//	Attribute : SumT
	SumTAttrib	*sumt = new SumTAttrib();
	Tango::UserDefaultAttrProp	sumt_prop;
	sumt_prop.set_description("Sum of the 4 computed ADC outputs (the xxxT attributes)");
	sumt_prop.set_label("SumT");
	sumt_prop.set_unit("a.u");
	//	standard_unit	not set for	SumT
	//	display_unit	not set for	SumT
	sumt_prop.set_format("%8.2f");
	//	max_value	not set for	SumT
	//	min_value	not set for	SumT
	//	max_alarm	not set for	SumT
	//	min_alarm	not set for	SumT
	//	max_warning	not set for	SumT
	//	min_warning	not set for	SumT
	//	delta_t	not set for	SumT
	//	delta_val	not set for	SumT
	sumt->set_default_properties(sumt_prop);
	//	Not Polled
	sumt->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	SumT does not fire change event
	//	SumT does not fire archive event
	//	SumT does not fire data_ready event
	att_list.push_back(sumt);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::attribute_factory_after

}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::command_factory()
 *	Description : Create the command object(s)
 *	              and store them in the command list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::command_factory()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::command_factory_before

	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	pResetCmd->set_polling_period(0);
	command_list.push_back(pResetCmd);
	ResetTriggerClass	*pResetTriggerCmd =
		new ResetTriggerClass("ResetTrigger",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	pResetTriggerCmd->set_polling_period(0);
	command_list.push_back(pResetTriggerCmd);
	ResetInterlockStatusClass	*pResetInterlockStatusCmd =
		new ResetInterlockStatusClass("ResetInterlockStatus",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetInterlockStatusCmd);
	MagicCommandClass	*pMagicCommandCmd =
		new MagicCommandClass("MagicCommand",
			Tango::DEV_STRING, Tango::DEVVAR_STRINGARRAY,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pMagicCommandCmd);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::command_factory_after

}




//===================================================================
//	Dynamic attributes related methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;


	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::create_static_att_list

}


//--------------------------------------------------------
/**
 * method : 		LiberaSinglePassEClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void LiberaSinglePassEClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		LiberaSinglePassE *dev = static_cast<LiberaSinglePassE *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()],true);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::erase_dynamic_attributes

}



	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::Additional Methods

} //	namespace
