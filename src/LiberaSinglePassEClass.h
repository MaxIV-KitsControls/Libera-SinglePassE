/*----- PROTECTED REGION ID(LiberaSinglePassEClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaSinglePassEClass.h
//
// description : Include for the LiberaSinglePassEClass root class.
//               This class is the singleton class for.
//               the LiberaSinglePassE device class..
//               It contains all properties and methods which the .
//               LiberaSinglePassE requires only once e.g. the commands.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LIBERASINGLEPASSECLASS_H
#define LIBERASINGLEPASSECLASS_H

#include <tango.h>
#include <LiberaSinglePassE.h>

/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass.h


namespace LiberaSinglePassE_ns
{
/*----- PROTECTED REGION ID(LiberaSinglePassEClass::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute BufferSize class definition
class BufferSizeAttrib: public Tango::Attr
{
public:
	BufferSizeAttrib():Attr("BufferSize",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~BufferSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_BufferSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_BufferSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_BufferSize_allowed(ty);}
};

//	Attribute AttenuationLevel class definition
class AttenuationLevelAttrib: public Tango::Attr
{
public:
	AttenuationLevelAttrib():Attr("AttenuationLevel",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AttenuationLevelAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_AttenuationLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_AttenuationLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_AttenuationLevel_allowed(ty);}
};

//	Attribute TriggerCounter class definition
class TriggerCounterAttrib: public Tango::Attr
{
public:
	TriggerCounterAttrib():Attr("TriggerCounter",
			Tango::DEV_ULONG, Tango::READ) {};
	~TriggerCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_TriggerCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_TriggerCounter_allowed(ty);}
};

//	Attribute Fan1Speed class definition
class Fan1SpeedAttrib: public Tango::Attr
{
public:
	Fan1SpeedAttrib():Attr("Fan1Speed",
			Tango::DEV_USHORT, Tango::READ) {};
	~Fan1SpeedAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan1Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan1Speed_allowed(ty);}
};

//	Attribute Fan2Speed class definition
class Fan2SpeedAttrib: public Tango::Attr
{
public:
	Fan2SpeedAttrib():Attr("Fan2Speed",
			Tango::DEV_USHORT, Tango::READ) {};
	~Fan2SpeedAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan2Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan2Speed_allowed(ty);}
};

//	Attribute Temp1 class definition
class Temp1Attrib: public Tango::Attr
{
public:
	Temp1Attrib():Attr("Temp1",
			Tango::DEV_USHORT, Tango::READ) {};
	~Temp1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp1_allowed(ty);}
};

//	Attribute Temp2 class definition
class Temp2Attrib: public Tango::Attr
{
public:
	Temp2Attrib():Attr("Temp2",
			Tango::DEV_USHORT, Tango::READ) {};
	~Temp2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp2_allowed(ty);}
};

//	Attribute Temp3 class definition
class Temp3Attrib: public Tango::Attr
{
public:
	Temp3Attrib():Attr("Temp3",
			Tango::DEV_USHORT, Tango::READ) {};
	~Temp3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp3_allowed(ty);}
};

//	Attribute Calibration_ka class definition
class Calibration_kaAttrib: public Tango::Attr
{
public:
	Calibration_kaAttrib():Attr("Calibration_ka",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Calibration_kaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Calibration_ka(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Calibration_ka(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Calibration_ka_allowed(ty);}
};

//	Attribute Calibration_kb class definition
class Calibration_kbAttrib: public Tango::Attr
{
public:
	Calibration_kbAttrib():Attr("Calibration_kb",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Calibration_kbAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Calibration_kb(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Calibration_kb(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Calibration_kb_allowed(ty);}
};

//	Attribute Calibration_kc class definition
class Calibration_kcAttrib: public Tango::Attr
{
public:
	Calibration_kcAttrib():Attr("Calibration_kc",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Calibration_kcAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Calibration_kc(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Calibration_kc(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Calibration_kc_allowed(ty);}
};

//	Attribute Calibration_kd class definition
class Calibration_kdAttrib: public Tango::Attr
{
public:
	Calibration_kdAttrib():Attr("Calibration_kd",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Calibration_kdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Calibration_kd(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Calibration_kd(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Calibration_kd_allowed(ty);}
};

//	Attribute Linear_x_k class definition
class Linear_x_kAttrib: public Tango::Attr
{
public:
	Linear_x_kAttrib():Attr("Linear_x_k",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_x_kAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_x_k(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_x_k(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_x_k_allowed(ty);}
};

//	Attribute Linear_x_offs class definition
class Linear_x_offsAttrib: public Tango::Attr
{
public:
	Linear_x_offsAttrib():Attr("Linear_x_offs",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_x_offsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_x_offs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_x_offs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_x_offs_allowed(ty);}
};

//	Attribute Linear_y_k class definition
class Linear_y_kAttrib: public Tango::Attr
{
public:
	Linear_y_kAttrib():Attr("Linear_y_k",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_y_kAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_y_k(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_y_k(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_y_k_allowed(ty);}
};

//	Attribute Linear_y_offs class definition
class Linear_y_offsAttrib: public Tango::Attr
{
public:
	Linear_y_offsAttrib():Attr("Linear_y_offs",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_y_offsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_y_offs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_y_offs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_y_offs_allowed(ty);}
};

//	Attribute Linear_q_k class definition
class Linear_q_kAttrib: public Tango::Attr
{
public:
	Linear_q_kAttrib():Attr("Linear_q_k",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_q_kAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_q_k(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_q_k(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_q_k_allowed(ty);}
};

//	Attribute Linear_q_offs class definition
class Linear_q_offsAttrib: public Tango::Attr
{
public:
	Linear_q_offsAttrib():Attr("Linear_q_offs",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_q_offsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_q_offs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_q_offs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_q_offs_allowed(ty);}
};

//	Attribute Linear_sum_k class definition
class Linear_sum_kAttrib: public Tango::Attr
{
public:
	Linear_sum_kAttrib():Attr("Linear_sum_k",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_sum_kAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_sum_k(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_sum_k(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_sum_k_allowed(ty);}
};

//	Attribute Linear_sum_offs class definition
class Linear_sum_offsAttrib: public Tango::Attr
{
public:
	Linear_sum_offsAttrib():Attr("Linear_sum_offs",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Linear_sum_offsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Linear_sum_offs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Linear_sum_offs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Linear_sum_offs_allowed(ty);}
};

//	Attribute Signal_expansion class definition
class Signal_expansionAttrib: public Tango::Attr
{
public:
	Signal_expansionAttrib():Attr("Signal_expansion",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Signal_expansionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Signal_expansion(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Signal_expansion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Signal_expansion_allowed(ty);}
};

//	Attribute Interlock_enabled class definition
class Interlock_enabledAttrib: public Tango::Attr
{
public:
	Interlock_enabledAttrib():Attr("Interlock_enabled",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~Interlock_enabledAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Interlock_enabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Interlock_enabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Interlock_enabled_allowed(ty);}
};

//	Attribute Limit_min_x class definition
class Limit_min_xAttrib: public Tango::Attr
{
public:
	Limit_min_xAttrib():Attr("Limit_min_x",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Limit_min_xAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Limit_min_x(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Limit_min_x(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Limit_min_x_allowed(ty);}
};

//	Attribute Limit_min_y class definition
class Limit_min_yAttrib: public Tango::Attr
{
public:
	Limit_min_yAttrib():Attr("Limit_min_y",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Limit_min_yAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Limit_min_y(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Limit_min_y(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Limit_min_y_allowed(ty);}
};

//	Attribute Limit_max_x class definition
class Limit_max_xAttrib: public Tango::Attr
{
public:
	Limit_max_xAttrib():Attr("Limit_max_x",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Limit_max_xAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Limit_max_x(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Limit_max_x(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Limit_max_x_allowed(ty);}
};

//	Attribute Limit_max_y class definition
class Limit_max_yAttrib: public Tango::Attr
{
public:
	Limit_max_yAttrib():Attr("Limit_max_y",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Limit_max_yAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Limit_max_y(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Limit_max_y(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Limit_max_y_allowed(ty);}
};

//	Attribute Overflow_threshold class definition
class Overflow_thresholdAttrib: public Tango::Attr
{
public:
	Overflow_thresholdAttrib():Attr("Overflow_threshold",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~Overflow_thresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Overflow_threshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Overflow_threshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Overflow_threshold_allowed(ty);}
};

//	Attribute Interlock_status class definition
class Interlock_statusAttrib: public Tango::Attr
{
public:
	Interlock_statusAttrib():Attr("Interlock_status",
			Tango::DEV_ULONG, Tango::READ) {};
	~Interlock_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Interlock_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Interlock_status_allowed(ty);}
};

//	Attribute Status_x class definition
class Status_xAttrib: public Tango::Attr
{
public:
	Status_xAttrib():Attr("Status_x",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~Status_xAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Status_x(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Status_x_allowed(ty);}
};

//	Attribute Status_y class definition
class Status_yAttrib: public Tango::Attr
{
public:
	Status_yAttrib():Attr("Status_y",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~Status_yAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Status_y(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Status_y_allowed(ty);}
};

//	Attribute Status_adc_overflow class definition
class Status_adc_overflowAttrib: public Tango::Attr
{
public:
	Status_adc_overflowAttrib():Attr("Status_adc_overflow",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~Status_adc_overflowAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Status_adc_overflow(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Status_adc_overflow_allowed(ty);}
};

//	Attribute XPosition class definition
class XPositionAttrib: public Tango::Attr
{
public:
	XPositionAttrib():Attr("XPosition",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~XPositionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_XPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_XPosition_allowed(ty);}
};

//	Attribute YPosition class definition
class YPositionAttrib: public Tango::Attr
{
public:
	YPositionAttrib():Attr("YPosition",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~YPositionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_YPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_YPosition_allowed(ty);}
};

//	Attribute Sum class definition
class SumAttrib: public Tango::Attr
{
public:
	SumAttrib():Attr("Sum",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~SumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Sum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Sum_allowed(ty);}
};

//	Attribute Quad class definition
class QuadAttrib: public Tango::Attr
{
public:
	QuadAttrib():Attr("Quad",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~QuadAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Quad(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Quad_allowed(ty);}
};

//	Attribute ADCChannelA class definition
class ADCChannelAAttrib: public Tango::SpectrumAttr
{
public:
	ADCChannelAAttrib():SpectrumAttr("ADCChannelA",
			Tango::DEV_SHORT, Tango::READ, 10000) {};
	~ADCChannelAAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_ADCChannelA(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_ADCChannelA_allowed(ty);}
};

//	Attribute ADCChannelB class definition
class ADCChannelBAttrib: public Tango::SpectrumAttr
{
public:
	ADCChannelBAttrib():SpectrumAttr("ADCChannelB",
			Tango::DEV_SHORT, Tango::READ, 10000) {};
	~ADCChannelBAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_ADCChannelB(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_ADCChannelB_allowed(ty);}
};

//	Attribute ADCChannelC class definition
class ADCChannelCAttrib: public Tango::SpectrumAttr
{
public:
	ADCChannelCAttrib():SpectrumAttr("ADCChannelC",
			Tango::DEV_SHORT, Tango::READ, 10000) {};
	~ADCChannelCAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_ADCChannelC(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_ADCChannelC_allowed(ty);}
};

//	Attribute ADCChannelD class definition
class ADCChannelDAttrib: public Tango::SpectrumAttr
{
public:
	ADCChannelDAttrib():SpectrumAttr("ADCChannelD",
			Tango::DEV_SHORT, Tango::READ, 10000) {};
	~ADCChannelDAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_ADCChannelD(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_ADCChannelD_allowed(ty);}
};

//	Attribute AT class definition
class ATAttrib: public Tango::SpectrumAttr
{
public:
	ATAttrib():SpectrumAttr("AT",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~ATAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_AT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_AT_allowed(ty);}
};

//	Attribute BT class definition
class BTAttrib: public Tango::SpectrumAttr
{
public:
	BTAttrib():SpectrumAttr("BT",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~BTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_BT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_BT_allowed(ty);}
};

//	Attribute CT class definition
class CTAttrib: public Tango::SpectrumAttr
{
public:
	CTAttrib():SpectrumAttr("CT",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~CTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CT_allowed(ty);}
};

//	Attribute DT class definition
class DTAttrib: public Tango::SpectrumAttr
{
public:
	DTAttrib():SpectrumAttr("DT",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~DTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_DT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_DT_allowed(ty);}
};

//	Attribute Current class definition
class CurrentAttrib: public Tango::SpectrumAttr
{
public:
	CurrentAttrib():SpectrumAttr("Current",
			Tango::DEV_DOUBLE, Tango::READ, 100) {};
	~CurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Current_allowed(ty);}
};

//	Attribute SumT class definition
class SumTAttrib: public Tango::SpectrumAttr
{
public:
	SumTAttrib():SpectrumAttr("SumT",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~SumTAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_SumT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_SumT_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_Reset_allowed(any);}
};

//	Command ResetTrigger class definition
class ResetTriggerClass : public Tango::Command
{
public:
	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetTriggerClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_ResetTrigger_allowed(any);}
};

//	Command ResetInterlockStatus class definition
class ResetInterlockStatusClass : public Tango::Command
{
public:
	ResetInterlockStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetInterlockStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetInterlockStatusClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_ResetInterlockStatus_allowed(any);}
};

//	Command MagicCommand class definition
class MagicCommandClass : public Tango::Command
{
public:
	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MagicCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_MagicCommand_allowed(any);}
};


/**
 *	The LiberaSinglePassEClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  LiberaSinglePassEClass : public Tango::DeviceClass
#else
class LiberaSinglePassEClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(LiberaSinglePassEClass::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassEClass::Additionnal DServer data members

	//	Class properties data members
	public:
		//	ServiceTaskSleep:	Sleep time (in mS) for the service task between libera boxes request
		Tango::DevLong	serviceTaskSleep;
		//	DataTaskHeartbeat:	Heartbeat time (in mS) for the data task
		Tango::DevLong	dataTaskHeartbeat;
	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static LiberaSinglePassEClass *init(const char *);
		static LiberaSinglePassEClass *instance();
		~LiberaSinglePassEClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		LiberaSinglePassEClass(string &);
		static LiberaSinglePassEClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	LiberaSinglePassE_H
