/*----- PROTECTED REGION ID(LiberaSinglePassEClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaSinglePassEClass.h
//
// description : Include for the LiberaSinglePassEClass root class.
//               This class is the singleton class for.
//               the LiberaSinglePassE device class..
//               It contains all properties and methods which the .
//               LiberaSinglePassE requires only once e.g. the commands.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LIBERASINGLEPASSECLASS_H
#define LIBERASINGLEPASSECLASS_H

#include <tango.h>
#include <LiberaSinglePassE.h>

/*----- PROTECTED REGION END -----*/

namespace LiberaSinglePassE_ns
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute BufferSize class definition
class BufferSizeAttrib: public Tango::Attr
{
public:
	BufferSizeAttrib():Attr("BufferSize",
	                   Tango::DEV_LONG, Tango::READ_WRITE) {};
	~BufferSizeAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_BufferSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_BufferSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_BufferSize_allowed(ty);}
};

//	Attribute Level class definition
class LevelAttrib: public Tango::Attr
{
public:
	LevelAttrib():Attr("Level",
	                   Tango::DEV_LONG, Tango::READ_WRITE) {};
	~LevelAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Level(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_Level(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Level_allowed(ty);}
};

//	Attribute TriggerCounter class definition
class TriggerCounterAttrib: public Tango::Attr
{
public:
	TriggerCounterAttrib():Attr("TriggerCounter",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~TriggerCounterAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_TriggerCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_TriggerCounter_allowed(ty);}
};

//	Attribute Fan1Speed class definition
class Fan1SpeedAttrib: public Tango::Attr
{
public:
	Fan1SpeedAttrib():Attr("Fan1Speed",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Fan1SpeedAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan1Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan1Speed_allowed(ty);}
};

//	Attribute Fan2Speed class definition
class Fan2SpeedAttrib: public Tango::Attr
{
public:
	Fan2SpeedAttrib():Attr("Fan2Speed",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Fan2SpeedAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan2Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan2Speed_allowed(ty);}
};

//	Attribute Temp1 class definition
class Temp1Attrib: public Tango::Attr
{
public:
	Temp1Attrib():Attr("Temp1",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp1Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp1_allowed(ty);}
};

//	Attribute Temp2 class definition
class Temp2Attrib: public Tango::Attr
{
public:
	Temp2Attrib():Attr("Temp2",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp2Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp2_allowed(ty);}
};

//	Attribute Temp3 class definition
class Temp3Attrib: public Tango::Attr
{
public:
	Temp3Attrib():Attr("Temp3",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp3Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp3_allowed(ty);}
};

//	Attribute Up class definition
class UpAttrib: public Tango::SpectrumAttr
{
public:
	UpAttrib():SpectrumAttr("Up",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~UpAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Up(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Up_allowed(ty);}
};

//	Attribute Down class definition
class DownAttrib: public Tango::SpectrumAttr
{
public:
	DownAttrib():SpectrumAttr("Down",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~DownAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Down(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Down_allowed(ty);}
};

//	Attribute Left class definition
class LeftAttrib: public Tango::SpectrumAttr
{
public:
	LeftAttrib():SpectrumAttr("Left",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~LeftAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Left(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Left_allowed(ty);}
};

//	Attribute Right class definition
class RightAttrib: public Tango::SpectrumAttr
{
public:
	RightAttrib():SpectrumAttr("Right",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~RightAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Right(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Right_allowed(ty);}
};

//	Attribute UpT class definition
class UpTAttrib: public Tango::SpectrumAttr
{
public:
	UpTAttrib():SpectrumAttr("UpT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~UpTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_UpT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_UpT_allowed(ty);}
};

//	Attribute DownT class definition
class DownTAttrib: public Tango::SpectrumAttr
{
public:
	DownTAttrib():SpectrumAttr("DownT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~DownTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_DownT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_DownT_allowed(ty);}
};

//	Attribute LeftT class definition
class LeftTAttrib: public Tango::SpectrumAttr
{
public:
	LeftTAttrib():SpectrumAttr("LeftT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~LeftTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LeftT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LeftT_allowed(ty);}
};

//	Attribute RightT class definition
class RightTAttrib: public Tango::SpectrumAttr
{
public:
	RightTAttrib():SpectrumAttr("RightT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~RightTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_RightT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_RightT_allowed(ty);}
};

//	Attribute Zposition class definition
class ZpositionAttrib: public Tango::SpectrumAttr
{
public:
	ZpositionAttrib():SpectrumAttr("Zposition",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~ZpositionAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Zposition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Zposition_allowed(ty);}
};

//	Attribute Xposition class definition
class XpositionAttrib: public Tango::SpectrumAttr
{
public:
	XpositionAttrib():SpectrumAttr("Xposition",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~XpositionAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Xposition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Xposition_allowed(ty);}
};

//	Attribute Current class definition
class CurrentAttrib: public Tango::SpectrumAttr
{
public:
	CurrentAttrib():SpectrumAttr("Current",
	                   Tango::DEV_DOUBLE, Tango::READ, 100) {};
	~CurrentAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Current_allowed(ty);}
};

//	Attribute SumT class definition
class SumTAttrib: public Tango::SpectrumAttr
{
public:
	SumTAttrib():SpectrumAttr("SumT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~SumTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_SumT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_SumT_allowed(ty);}
};






//=========================================
//	Define classes for commands
//=========================================
//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_Reset_allowed(any);}
};

//	Command ResetTrigger class definition
class ResetTriggerClass : public Tango::Command
{
public:
	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetTriggerClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_ResetTrigger_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	LiberaSinglePassEClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Additionnal DServer data members




//	Class properties data members
public:
	//	ServiceTaskSleep:	Sleep time (in mS) for the service task between libera boxes request
	Tango::DevLong	serviceTaskSleep;
	//	DataTaskHeartbeat:	Heartbeat time (in mS) for the data task
	Tango::DevLong	dataTaskHeartbeat;
public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static LiberaSinglePassEClass *init(const char *);
	static LiberaSinglePassEClass *instance();
	~LiberaSinglePassEClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);

protected:
	LiberaSinglePassEClass(string &);
	static LiberaSinglePassEClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;
	Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);


};

}	//	namespace

#endif	//	LIBERASINGLEPASSECLASS_H

