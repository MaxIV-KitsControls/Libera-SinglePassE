/*----- PROTECTED REGION ID(LiberaSinglePassEClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaSinglePassEClass.h
//
// description : Include for the LiberaSinglePassEClass root class.
//               This class is the singleton class for.
//               the LiberaSinglePassE device class..
//               It contains all properties and methods which the .
//               LiberaSinglePassE requires only once e.g. the commands.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LIBERASINGLEPASSECLASS_H
#define LIBERASINGLEPASSECLASS_H

#include <tango.h>
#include <LiberaSinglePassE.h>

/*----- PROTECTED REGION END -----*/

namespace LiberaSinglePassE_ns
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute BufferSize class definition
class BufferSizeAttrib: public Tango::Attr
{
public:
	BufferSizeAttrib():Attr("BufferSize",
	                   Tango::DEV_LONG, Tango::READ_WRITE) {};
	~BufferSizeAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_BufferSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_BufferSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_BufferSize_allowed(ty);}
};

//	Attribute AttenuationLevel class definition
class AttenuationLevelAttrib: public Tango::Attr
{
public:
	AttenuationLevelAttrib():Attr("AttenuationLevel",
	                   Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AttenuationLevelAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_AttenuationLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_AttenuationLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_AttenuationLevel_allowed(ty);}
};

//	Attribute TriggerCounter class definition
class TriggerCounterAttrib: public Tango::Attr
{
public:
	TriggerCounterAttrib():Attr("TriggerCounter",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~TriggerCounterAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_TriggerCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_TriggerCounter_allowed(ty);}
};

//	Attribute Fan1Speed class definition
class Fan1SpeedAttrib: public Tango::Attr
{
public:
	Fan1SpeedAttrib():Attr("Fan1Speed",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Fan1SpeedAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan1Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan1Speed_allowed(ty);}
};

//	Attribute Fan2Speed class definition
class Fan2SpeedAttrib: public Tango::Attr
{
public:
	Fan2SpeedAttrib():Attr("Fan2Speed",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Fan2SpeedAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Fan2Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Fan2Speed_allowed(ty);}
};

//	Attribute Temp1 class definition
class Temp1Attrib: public Tango::Attr
{
public:
	Temp1Attrib():Attr("Temp1",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp1Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp1_allowed(ty);}
};

//	Attribute Temp2 class definition
class Temp2Attrib: public Tango::Attr
{
public:
	Temp2Attrib():Attr("Temp2",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp2Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp2_allowed(ty);}
};

//	Attribute Temp3 class definition
class Temp3Attrib: public Tango::Attr
{
public:
	Temp3Attrib():Attr("Temp3",
	                   Tango::DEV_USHORT, Tango::READ) {};
	~Temp3Attrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Temp3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Temp3_allowed(ty);}
};

//	Attribute CalibrationKa class definition
class CalibrationKaAttrib: public Tango::Attr
{
public:
	CalibrationKaAttrib():Attr("CalibrationKa",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CalibrationKaAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CalibrationKa(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_CalibrationKa(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CalibrationKa_allowed(ty);}
};

//	Attribute CalibrationKb class definition
class CalibrationKbAttrib: public Tango::Attr
{
public:
	CalibrationKbAttrib():Attr("CalibrationKb",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CalibrationKbAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CalibrationKb(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_CalibrationKb(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CalibrationKb_allowed(ty);}
};

//	Attribute CalibrationKc class definition
class CalibrationKcAttrib: public Tango::Attr
{
public:
	CalibrationKcAttrib():Attr("CalibrationKc",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CalibrationKcAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CalibrationKc(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_CalibrationKc(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CalibrationKc_allowed(ty);}
};

//	Attribute CalibrationKd class definition
class CalibrationKdAttrib: public Tango::Attr
{
public:
	CalibrationKdAttrib():Attr("CalibrationKd",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CalibrationKdAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CalibrationKd(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_CalibrationKd(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CalibrationKd_allowed(ty);}
};

//	Attribute LinearXK class definition
class LinearXKAttrib: public Tango::Attr
{
public:
	LinearXKAttrib():Attr("LinearXK",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearXKAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearXK(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearXK(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearXK_allowed(ty);}
};

//	Attribute LinearXOffs class definition
class LinearXOffsAttrib: public Tango::Attr
{
public:
	LinearXOffsAttrib():Attr("LinearXOffs",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearXOffsAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearXOffs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearXOffs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearXOffs_allowed(ty);}
};

//	Attribute LinearYK class definition
class LinearYKAttrib: public Tango::Attr
{
public:
	LinearYKAttrib():Attr("LinearYK",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearYKAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearYK(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearYK(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearYK_allowed(ty);}
};

//	Attribute LinearYOffs class definition
class LinearYOffsAttrib: public Tango::Attr
{
public:
	LinearYOffsAttrib():Attr("LinearYOffs",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearYOffsAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearYOffs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearYOffs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearYOffs_allowed(ty);}
};

//	Attribute LinearQK class definition
class LinearQKAttrib: public Tango::Attr
{
public:
	LinearQKAttrib():Attr("LinearQK",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearQKAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearQK(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearQK(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearQK_allowed(ty);}
};

//	Attribute LinearQOffs class definition
class LinearQOffsAttrib: public Tango::Attr
{
public:
	LinearQOffsAttrib():Attr("LinearQOffs",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearQOffsAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearQOffs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearQOffs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearQOffs_allowed(ty);}
};

//	Attribute LinearSumK class definition
class LinearSumKAttrib: public Tango::Attr
{
public:
	LinearSumKAttrib():Attr("LinearSumK",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearSumKAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearSumK(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearSumK(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearSumK_allowed(ty);}
};

//	Attribute LinearSumOffs class definition
class LinearSumOffsAttrib: public Tango::Attr
{
public:
	LinearSumOffsAttrib():Attr("LinearSumOffs",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LinearSumOffsAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LinearSumOffs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LinearSumOffs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LinearSumOffs_allowed(ty);}
};

//	Attribute SignalExpansion class definition
class SignalExpansionAttrib: public Tango::Attr
{
public:
	SignalExpansionAttrib():Attr("SignalExpansion",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SignalExpansionAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_SignalExpansion(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_SignalExpansion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_SignalExpansion_allowed(ty);}
};

//	Attribute InterlockEnabled class definition
class InterlockEnabledAttrib: public Tango::Attr
{
public:
	InterlockEnabledAttrib():Attr("InterlockEnabled",
	                   Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~InterlockEnabledAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_InterlockEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_InterlockEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_InterlockEnabled_allowed(ty);}
};

//	Attribute LimitMinX class definition
class LimitMinXAttrib: public Tango::Attr
{
public:
	LimitMinXAttrib():Attr("LimitMinX",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LimitMinXAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LimitMinX(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LimitMinX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LimitMinX_allowed(ty);}
};

//	Attribute LimitMinY class definition
class LimitMinYAttrib: public Tango::Attr
{
public:
	LimitMinYAttrib():Attr("LimitMinY",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LimitMinYAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LimitMinY(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LimitMinY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LimitMinY_allowed(ty);}
};

//	Attribute LimitMaxX class definition
class LimitMaxXAttrib: public Tango::Attr
{
public:
	LimitMaxXAttrib():Attr("LimitMaxX",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LimitMaxXAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LimitMaxX(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LimitMaxX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LimitMaxX_allowed(ty);}
};

//	Attribute LimitMaxY class definition
class LimitMaxYAttrib: public Tango::Attr
{
public:
	LimitMaxYAttrib():Attr("LimitMaxY",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~LimitMaxYAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_LimitMaxY(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_LimitMaxY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_LimitMaxY_allowed(ty);}
};

//	Attribute OverflowThreshold class definition
class OverflowThresholdAttrib: public Tango::Attr
{
public:
	OverflowThresholdAttrib():Attr("OverflowThreshold",
	                   Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~OverflowThresholdAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_OverflowThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->write_OverflowThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_OverflowThreshold_allowed(ty);}
};

//	Attribute InterlockStatus class definition
class InterlockStatusAttrib: public Tango::Attr
{
public:
	InterlockStatusAttrib():Attr("InterlockStatus",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~InterlockStatusAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_InterlockStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_InterlockStatus_allowed(ty);}
};

//	Attribute StatusX class definition
class StatusXAttrib: public Tango::Attr
{
public:
	StatusXAttrib():Attr("StatusX",
	                   Tango::DEV_BOOLEAN, Tango::READ) {};
	~StatusXAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_StatusX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_StatusX_allowed(ty);}
};

//	Attribute StatusY class definition
class StatusYAttrib: public Tango::Attr
{
public:
	StatusYAttrib():Attr("StatusY",
	                   Tango::DEV_BOOLEAN, Tango::READ) {};
	~StatusYAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_StatusY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_StatusY_allowed(ty);}
};

//	Attribute StatusAdcOverflow class definition
class StatusAdcOverflowAttrib: public Tango::Attr
{
public:
	StatusAdcOverflowAttrib():Attr("StatusAdcOverflow",
	                   Tango::DEV_BOOLEAN, Tango::READ) {};
	~StatusAdcOverflowAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_StatusAdcOverflow(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_StatusAdcOverflow_allowed(ty);}
};

//	Attribute A class definition
class AAttrib: public Tango::SpectrumAttr
{
public:
	AAttrib():SpectrumAttr("A",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~AAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_A(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_A_allowed(ty);}
};

//	Attribute B class definition
class BAttrib: public Tango::SpectrumAttr
{
public:
	BAttrib():SpectrumAttr("B",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~BAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_B(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_B_allowed(ty);}
};

//	Attribute C class definition
class CAttrib: public Tango::SpectrumAttr
{
public:
	CAttrib():SpectrumAttr("C",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~CAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_C(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_C_allowed(ty);}
};

//	Attribute D class definition
class DAttrib: public Tango::SpectrumAttr
{
public:
	DAttrib():SpectrumAttr("D",
	                   Tango::DEV_SHORT, Tango::READ, 10000) {};
	~DAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_D(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_D_allowed(ty);}
};

//	Attribute AT class definition
class ATAttrib: public Tango::SpectrumAttr
{
public:
	ATAttrib():SpectrumAttr("AT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~ATAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_AT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_AT_allowed(ty);}
};

//	Attribute BT class definition
class BTAttrib: public Tango::SpectrumAttr
{
public:
	BTAttrib():SpectrumAttr("BT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~BTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_BT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_BT_allowed(ty);}
};

//	Attribute CT class definition
class CTAttrib: public Tango::SpectrumAttr
{
public:
	CTAttrib():SpectrumAttr("CT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~CTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_CT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_CT_allowed(ty);}
};

//	Attribute DT class definition
class DTAttrib: public Tango::SpectrumAttr
{
public:
	DTAttrib():SpectrumAttr("DT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~DTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_DT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_DT_allowed(ty);}
};

//	Attribute Yposition class definition
class YpositionAttrib: public Tango::SpectrumAttr
{
public:
	YpositionAttrib():SpectrumAttr("Yposition",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~YpositionAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Yposition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Yposition_allowed(ty);}
};

//	Attribute Xposition class definition
class XpositionAttrib: public Tango::SpectrumAttr
{
public:
	XpositionAttrib():SpectrumAttr("Xposition",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~XpositionAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Xposition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Xposition_allowed(ty);}
};

//	Attribute Current class definition
class CurrentAttrib: public Tango::SpectrumAttr
{
public:
	CurrentAttrib():SpectrumAttr("Current",
	                   Tango::DEV_DOUBLE, Tango::READ, 100) {};
	~CurrentAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_Current_allowed(ty);}
};

//	Attribute SumT class definition
class SumTAttrib: public Tango::SpectrumAttr
{
public:
	SumTAttrib():SpectrumAttr("SumT",
	                   Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~SumTAttrib() {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaSinglePassE *>(dev))->read_SumT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaSinglePassE *>(dev))->is_SumT_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_Reset_allowed(any);}
};

//	Command ResetTrigger class definition
class ResetTriggerClass : public Tango::Command
{
public:
	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetTriggerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetTriggerClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_ResetTrigger_allowed(any);}
};

//	Command ResetInterlockStatus class definition
class ResetInterlockStatusClass : public Tango::Command
{
public:
	ResetInterlockStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetInterlockStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetInterlockStatusClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_ResetInterlockStatus_allowed(any);}
};

//	Command MagicCommand class definition
class MagicCommandClass : public Tango::Command
{
public:
	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MagicCommandClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaSinglePassE *>(dev))->is_MagicCommand_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	LiberaSinglePassEClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Additionnal DServer data members




//	Class properties data members
public:
	//	DataTaskHeartbeat:	Heartbeat time (in mS) for the data task
	Tango::DevLong	dataTaskHeartbeat;
public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static LiberaSinglePassEClass *init(const char *);
	static LiberaSinglePassEClass *instance();
	~LiberaSinglePassEClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);

protected:
	LiberaSinglePassEClass(string &);
	static LiberaSinglePassEClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	LIBERASINGLEPASSECLASS_H

