/*----- PROTECTED REGION ID(LiberaSinglePassEStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaSinglePassEStateMachine.cpp
//
// description : C++ source for the �name� and its alowed
//               methods for commands and attributes
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <LiberaSinglePassE.h>
#include <LiberaSinglePassEClass.h>

/*----- PROTECTED REGION END -----*/


/*
 * LiberaSinglePassE states description:
 *
 * ON :	The Libera box is up and running 
 * UNKNOWN :	No possible communication with the Libera box 
 * FAULT :	The Libera box is in Fault 
 */

namespace LiberaSinglePassE_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_BufferSizeState_allowed()
 *	Description : Execution allowed for BufferSize attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_BufferSize_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for BufferSize attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::BufferSizeStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::BufferSizeStateAllowed_WRITE

		return true;
	}
	else
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_BufferSizeStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_BufferSizeStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_AttenuationLevelState_allowed()
 *	Description : Execution allowed for AttenuationLevel attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_AttenuationLevel_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for AttenuationLevel attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::AttenuationLevelStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::AttenuationLevelStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for AttenuationLevel attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_AttenuationLevelStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_AttenuationLevelStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_TriggerCounterState_allowed()
 *	Description : Execution allowed for TriggerCounter attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_TriggerCounter_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_TriggerCounterStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_TriggerCounterStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_Fan1SpeedState_allowed()
 *	Description : Execution allowed for Fan1Speed attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Fan1Speed_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for Fan1Speed attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan1SpeedStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan1SpeedStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_Fan2SpeedState_allowed()
 *	Description : Execution allowed for Fan2Speed attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Fan2Speed_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan2SpeedStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan2SpeedStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_Temp1State_allowed()
 *	Description : Execution allowed for Temp1 attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Temp1_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp1StateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp1StateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_Temp2State_allowed()
 *	Description : Execution allowed for Temp2 attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Temp2_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp2StateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp2StateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_Temp3State_allowed()
 *	Description : Execution allowed for Temp3 attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Temp3_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp3StateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp3StateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CalibrationKaState_allowed()
 *	Description : Execution allowed for CalibrationKa attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_CalibrationKa_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for CalibrationKa attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::CalibrationKaStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::CalibrationKaStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for CalibrationKa attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CalibrationKaStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CalibrationKaStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CalibrationKbState_allowed()
 *	Description : Execution allowed for CalibrationKb attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_CalibrationKb_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for CalibrationKb attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::CalibrationKbStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::CalibrationKbStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for CalibrationKb attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CalibrationKbStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CalibrationKbStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CalibrationKcState_allowed()
 *	Description : Execution allowed for CalibrationKc attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_CalibrationKc_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for CalibrationKc attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::CalibrationKcStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::CalibrationKcStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for CalibrationKc attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CalibrationKcStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CalibrationKcStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CalibrationKdState_allowed()
 *	Description : Execution allowed for CalibrationKd attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_CalibrationKd_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for CalibrationKd attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::CalibrationKdStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::CalibrationKdStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for CalibrationKd attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CalibrationKdStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CalibrationKdStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearXKState_allowed()
 *	Description : Execution allowed for LinearXK attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearXK_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearXK attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearXKStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearXKStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearXK attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearXKStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearXKStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearXOffsState_allowed()
 *	Description : Execution allowed for LinearXOffs attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearXOffs_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearXOffs attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearXOffsStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearXOffsStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearXOffs attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearXOffsStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearXOffsStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearYKState_allowed()
 *	Description : Execution allowed for LinearYK attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearYK_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearYK attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearYKStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearYKStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearYK attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearYKStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearYKStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearYOffsState_allowed()
 *	Description : Execution allowed for LinearYOffs attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearYOffs_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearYOffs attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearYOffsStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearYOffsStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearYOffs attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearYOffsStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearYOffsStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearQKState_allowed()
 *	Description : Execution allowed for LinearQK attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearQK_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearQK attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearQKStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearQKStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearQK attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearQKStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearQKStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearQOffsState_allowed()
 *	Description : Execution allowed for LinearQOffs attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearQOffs_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearQOffs attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearQOffsStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearQOffsStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearQOffs attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearQOffsStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearQOffsStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearSumKState_allowed()
 *	Description : Execution allowed for LinearSumK attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearSumK_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearSumK attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearSumKStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearSumKStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearSumK attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearSumKStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearSumKStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LinearSumOffsState_allowed()
 *	Description : Execution allowed for LinearSumOffs attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LinearSumOffs_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LinearSumOffs attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LinearSumOffsStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LinearSumOffsStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LinearSumOffs attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LinearSumOffsStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LinearSumOffsStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_SignalExpansionState_allowed()
 *	Description : Execution allowed for SignalExpansion attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_SignalExpansion_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for SignalExpansion attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::SignalExpansionStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::SignalExpansionStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for SignalExpansion attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_SignalExpansionStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_SignalExpansionStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_InterlockEnabledState_allowed()
 *	Description : Execution allowed for InterlockEnabled attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_InterlockEnabled_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for InterlockEnabled attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::InterlockEnabledStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::InterlockEnabledStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for InterlockEnabled attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_InterlockEnabledStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_InterlockEnabledStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LimitMinXState_allowed()
 *	Description : Execution allowed for LimitMinX attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LimitMinX_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LimitMinX attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LimitMinXStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LimitMinXStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LimitMinX attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LimitMinXStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LimitMinXStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LimitMinYState_allowed()
 *	Description : Execution allowed for LimitMinY attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LimitMinY_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LimitMinY attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LimitMinYStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LimitMinYStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LimitMinY attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LimitMinYStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LimitMinYStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LimitMaxXState_allowed()
 *	Description : Execution allowed for LimitMaxX attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LimitMaxX_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LimitMaxX attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LimitMaxXStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LimitMaxXStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LimitMaxX attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LimitMaxXStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LimitMaxXStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_LimitMaxYState_allowed()
 *	Description : Execution allowed for LimitMaxY attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_LimitMaxY_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for LimitMaxY attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::LimitMaxYStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::LimitMaxYStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for LimitMaxY attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_LimitMaxYStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_LimitMaxYStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_OverflowThresholdState_allowed()
 *	Description : Execution allowed for OverflowThreshold attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_OverflowThreshold_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for OverflowThreshold attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(LiberaSinglePassE::OverflowThresholdStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::OverflowThresholdStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for OverflowThreshold attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_OverflowThresholdStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_OverflowThresholdStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_InterlockStatusState_allowed()
 *	Description : Execution allowed for InterlockStatus attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_InterlockStatus_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for InterlockStatus attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_InterlockStatusStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_InterlockStatusStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_StatusXState_allowed()
 *	Description : Execution allowed for StatusX attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_StatusX_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for StatusX attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_StatusXStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_StatusXStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_StatusYState_allowed()
 *	Description : Execution allowed for StatusY attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_StatusY_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for StatusY attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_StatusYStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_StatusYStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_StatusAdcOverflowState_allowed()
 *	Description : Execution allowed for StatusAdcOverflow attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_StatusAdcOverflow_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for StatusAdcOverflow attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_StatusAdcOverflowStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_StatusAdcOverflowStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_AState_allowed()
 *	Description : Execution allowed for A attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_A_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for A attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_AStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_AStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_BState_allowed()
 *	Description : Execution allowed for B attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_B_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for B attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_BStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_BStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CState_allowed()
 *	Description : Execution allowed for C attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_C_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for C attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_DState_allowed()
 *	Description : Execution allowed for D attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_D_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for D attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_DStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_DStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_ATState_allowed()
 *	Description : Execution allowed for AT attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_AT_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for AT attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ATStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ATStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_BTState_allowed()
 *	Description : Execution allowed for BT attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_BT_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for BT attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_BTStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_BTStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CTState_allowed()
 *	Description : Execution allowed for CT attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_CT_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for CT attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CTStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CTStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_DTState_allowed()
 *	Description : Execution allowed for DT attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_DT_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for DT attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_DTStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_DTStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_YpositionState_allowed()
 *	Description : Execution allowed for Yposition attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Yposition_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for Yposition attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_YpositionStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_YpositionStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_XpositionState_allowed()
 *	Description : Execution allowed for Xposition attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Xposition_allowed(Tango::AttReqType type)
{
		//	Not any excluded states for Xposition attribute in READ access.
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_XpositionStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_XpositionStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_CurrentState_allowed()
 *	Description : Execution allowed for Current attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Current_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CurrentStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CurrentStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_SumTState_allowed()
 *	Description : Execution allowed for SumT attribute.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_SumT_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_SumTStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_SumTStateAllowed_READ

		return false;
	}
	return true;
}


	/*----- PROTECTED REGION ID(LiberaSinglePassE::are_dynamic_attributes_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic attributes are alowed

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::are_dynamic_attributes_allowed


//=================================================
//		Commands Allowed Methods
//=================================================


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_ResetState_allowed()
 *	Description : Execution allowed for Reset command.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_Reset_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::ON	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::ResetStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::ResetStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_ResetTriggerState_allowed()
 *	Description : Execution allowed for ResetTrigger command.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_ResetTrigger_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::UNKNOWN	|| 
		get_state() == Tango::FAULT)
	{

	/*----- PROTECTED REGION ID(LiberaSinglePassE::ResetTriggerStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::ResetTriggerStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_ResetInterlockStatusState_allowed()
 *	Description : Execution allowed for ResetInterlockStatus command.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_ResetInterlockStatus_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for ResetInterlockStatus command.

	/*----- PROTECTED REGION ID(LiberaSinglePassE::ResetInterlockStatusStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::ResetInterlockStatusStateAllowed

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::is_MagicCommandState_allowed()
 *	Description : Execution allowed for MagicCommand command.
 */
//--------------------------------------------------------

bool LiberaSinglePassE::is_MagicCommand_allowed(const CORBA::Any &any)
{
	//	Not any excluded states for MagicCommand command.

	/*----- PROTECTED REGION ID(LiberaSinglePassE::MagicCommandStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::MagicCommandStateAllowed

	return true;
}


	/*----- PROTECTED REGION ID(LiberaSinglePassE::are_dynamic_commands_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic commands are alowed

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::are_dynamic_commands_allowed

}	// namespace LiberaSinglePassE_ns
