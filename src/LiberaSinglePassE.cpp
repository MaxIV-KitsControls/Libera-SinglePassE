/*----- PROTECTED REGION ID(LiberaSinglePassE.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaSinglePassE.cpp
//
// description : C++ source for the LiberaSinglePassE and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaSinglePassE are implemented in this file.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaSinglePassE.h>
#include <LiberaSinglePassEClass.h>
#include <LiberaSinglePassEDataTask.h>

/*----- PROTECTED REGION END -----*/


/**
 *	LiberaSinglePassE class description:
 *	This Tango class is the interface of the Instrumentation Technologies (IT) Libera
 *	Brilliance Single Pass E equipment. This class supports only a subset of all the
 *	equipment features. It is the basic equipment for a Injection and Transfer Efficiency
 *	Measurement System
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//----------------------------------------------------------------
//  State                 |  Inherited (no method)
//  Status                |  Inherited (no method)
//  Reset                 |  reset
//  ResetTrigger          |  reset_trigger
//  ResetInterlockStatus  |  reset_interlock_status
//  MagicCommand          |  magic_command
//================================================================

namespace LiberaSinglePassE_ns
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassE()
 *	Description : Constructors for a Tango device
 *	              implementing the class LiberaSinglePassE
 */
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, string &s)
	: Tango::Device_4Impl(cl, s.c_str()),
		attr_BufferSize_read(NULL),
		attr_AttenuationLevel_read(NULL),
		attr_TriggerCounter_read(NULL),
		attr_Fan1Speed_read(NULL),
		attr_Fan2Speed_read(NULL),
		attr_Temp1_read(NULL),
		attr_Temp2_read(NULL),
		attr_Temp3_read(NULL),
		attr_A_read(NULL),
		attr_B_read(NULL),
		attr_C_read(NULL),
		attr_D_read(NULL),
		attr_AT_read(NULL),
		attr_BT_read(NULL),
		attr_CT_read(NULL),
		attr_DT_read(NULL),
		attr_Yposition_read(NULL),
		attr_Xposition_read(NULL),
		attr_Current_read(NULL),
		attr_SumT_read(NULL),
		attr_Calibration_ka_read(NULL),
		attr_Calibration_kb_read(NULL),
		attr_Calibration_kc_read(NULL),
		attr_Calibration_kd_read(NULL),
		attr_Linear_x_k_read(NULL),
		attr_Linear_x_offs_read(NULL),
		attr_Linear_y_k_read(NULL),
		attr_Linear_y_offs_read(NULL),
		attr_Linear_q_k_read(NULL),
		attr_Linear_q_offs_read(NULL),
		attr_Linear_sum_k_read(NULL),
		attr_Linear_sum_offs_read(NULL),
		attr_Signal_expansion_read(NULL),
		attr_Interlock_enabled_read(NULL),
		attr_Limit_min_x_read(NULL),
		attr_Limit_min_y_read(NULL),
		attr_Limit_max_x_read(NULL),
		attr_Limit_max_y_read(NULL),
		attr_Overflow_threshold_read(NULL),
		attr_Interlock_status_read(NULL),
		attr_Status_x_read(NULL),
		attr_Status_y_read(NULL),
		attr_Status_adc_overflow_read(NULL)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_1
}
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, const char *s)
	: Tango::Device_4Impl(cl, s),
		attr_BufferSize_read(NULL),
		attr_AttenuationLevel_read(NULL),
		attr_TriggerCounter_read(NULL),
		attr_Fan1Speed_read(NULL),
		attr_Fan2Speed_read(NULL),
		attr_Temp1_read(NULL),
		attr_Temp2_read(NULL),
		attr_Temp3_read(NULL),
		attr_A_read(NULL),
		attr_B_read(NULL),
		attr_C_read(NULL),
		attr_D_read(NULL),
		attr_AT_read(NULL),
		attr_BT_read(NULL),
		attr_CT_read(NULL),
		attr_DT_read(NULL),
		attr_Yposition_read(NULL),
		attr_Xposition_read(NULL),
		attr_Current_read(NULL),
		attr_SumT_read(NULL),
		attr_Calibration_ka_read(NULL),
		attr_Calibration_kb_read(NULL),
		attr_Calibration_kc_read(NULL),
		attr_Calibration_kd_read(NULL),
		attr_Linear_x_k_read(NULL),
		attr_Linear_x_offs_read(NULL),
		attr_Linear_y_k_read(NULL),
		attr_Linear_y_offs_read(NULL),
		attr_Linear_q_k_read(NULL),
		attr_Linear_q_offs_read(NULL),
		attr_Linear_sum_k_read(NULL),
		attr_Linear_sum_offs_read(NULL),
		attr_Signal_expansion_read(NULL),
		attr_Interlock_enabled_read(NULL),
		attr_Limit_min_x_read(NULL),
		attr_Limit_min_y_read(NULL),
		attr_Limit_max_x_read(NULL),
		attr_Limit_max_y_read(NULL),
		attr_Overflow_threshold_read(NULL),
		attr_Interlock_status_read(NULL),
		attr_Status_x_read(NULL),
		attr_Status_y_read(NULL),
		attr_Status_adc_overflow_read(NULL)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_2
}
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, const char *s, const char *d)
	: Tango::Device_4Impl(cl, s, d),
		attr_BufferSize_read(NULL),
		attr_AttenuationLevel_read(NULL),
		attr_TriggerCounter_read(NULL),
		attr_Fan1Speed_read(NULL),
		attr_Fan2Speed_read(NULL),
		attr_Temp1_read(NULL),
		attr_Temp2_read(NULL),
		attr_Temp3_read(NULL),
		attr_A_read(NULL),
		attr_B_read(NULL),
		attr_C_read(NULL),
		attr_D_read(NULL),
		attr_AT_read(NULL),
		attr_BT_read(NULL),
		attr_CT_read(NULL),
		attr_DT_read(NULL),
		attr_Yposition_read(NULL),
		attr_Xposition_read(NULL),
		attr_Current_read(NULL),
		attr_SumT_read(NULL),
		attr_Calibration_ka_read(NULL),
		attr_Calibration_kb_read(NULL),
		attr_Calibration_kc_read(NULL),
		attr_Calibration_kd_read(NULL),
		attr_Linear_x_k_read(NULL),
		attr_Linear_x_offs_read(NULL),
		attr_Linear_y_k_read(NULL),
		attr_Linear_y_offs_read(NULL),
		attr_Linear_q_k_read(NULL),
		attr_Linear_q_offs_read(NULL),
		attr_Linear_sum_k_read(NULL),
		attr_Linear_sum_offs_read(NULL),
		attr_Signal_expansion_read(NULL),
		attr_Interlock_enabled_read(NULL),
		attr_Limit_min_x_read(NULL),
		attr_Limit_min_y_read(NULL),
		attr_Limit_max_x_read(NULL),
		attr_Limit_max_y_read(NULL),
		attr_Overflow_threshold_read(NULL),
		attr_Interlock_status_read(NULL),
		attr_Status_x_read(NULL),
		attr_Status_y_read(NULL),
		attr_Status_adc_overflow_read(NULL)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaSinglePassE::delete_device()
{
	DEBUG_STREAM << "LiberaSinglePassE::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::delete_device) ENABLED START -----*/

	//	Delete device allocated objects

	// Get rid of threads first
	delete data_thread;
	data_thread = NULL;

	// Disconnect from MCI application daemon
	try {
		mci_application_root.Destroy();
		mci::Disconnect(liberaIpAddr, mci::Root::Application);
	} catch (istd::Exception &e) {
		ERROR_STREAM_DS << "MCI application daemon disconnect failed: "
				<< e.what() << endl;
	}

	// Disconnect from MCI platform daemon
	try {
		mci_platform_root.Destroy();
		mci::Disconnect(liberaIpAddr, mci::Root::Platform);
	} catch (istd::Exception &e) {
		ERROR_STREAM_DS << "MCI platform daemon disconnect failed: "
				<< e.what() << endl;
	}

	// Attributes
	delete attr_BufferSize_read;
	attr_BufferSize_read = NULL;
	delete attr_AttenuationLevel_read;
	attr_AttenuationLevel_read = NULL;
	delete attr_Fan1Speed_read;
	attr_Fan1Speed_read = NULL;
	delete attr_Fan2Speed_read;
	attr_Fan2Speed_read = NULL;
	delete attr_Temp1_read;
	attr_Temp1_read = NULL;
	delete attr_Temp2_read;
	attr_Temp2_read = NULL;
	delete attr_Temp3_read;
	attr_Temp3_read = NULL;

	// Just reset attribute pointer
	attr_TriggerCounter_read = NULL;

	// Get rid of the data buffers
	delete [] attr_AT_read;
	attr_AT_read = NULL;
	delete [] attr_BT_read;
	attr_BT_read = NULL;
	delete [] attr_CT_read;
	attr_CT_read = NULL;
	delete [] attr_DT_read;
	attr_DT_read = NULL;
	delete [] attr_SumT_read;
	attr_SumT_read = NULL;
	delete [] attr_Yposition_read;
	attr_Yposition_read = NULL;
	delete [] attr_Xposition_read;
	attr_Xposition_read = NULL;
	delete [] attr_Current_read;
	attr_Current_read = NULL;
	delete [] attr_A_read;
	attr_A_read = NULL;
	delete [] attr_B_read;
	attr_B_read = NULL;
	delete [] attr_C_read;
	attr_C_read = NULL;
	delete [] attr_D_read;
	attr_D_read = NULL;
	delete attr_Calibration_ka_read;
	attr_Calibration_ka_read = NULL;
	delete attr_Calibration_kb_read;
	attr_Calibration_kb_read = NULL;
	delete attr_Calibration_kc_read;
	attr_Calibration_kc_read = NULL;
	delete attr_Calibration_kd_read;
	attr_Calibration_kd_read = NULL;
	delete attr_Linear_x_k_read;
	attr_Linear_x_k_read = NULL;
	delete attr_Linear_x_offs_read;
	attr_Linear_x_offs_read = NULL;
	delete attr_Linear_y_k_read;
	attr_Linear_y_k_read = NULL;
	delete attr_Linear_y_offs_read;
	attr_Linear_y_offs_read = NULL;
	delete attr_Linear_q_k_read;
	attr_Linear_q_k_read = NULL;
	delete attr_Linear_q_offs_read;
	attr_Linear_q_offs_read = NULL;
	delete attr_Linear_sum_k_read;
	attr_Linear_sum_k_read = NULL;
	delete attr_Linear_sum_offs_read;
	attr_Linear_sum_offs_read = NULL;
	delete attr_Signal_expansion_read;
	attr_Signal_expansion_read = NULL;
	delete attr_Interlock_enabled_read;
	attr_Interlock_enabled_read = NULL;
	delete attr_Limit_min_x_read;
	attr_Limit_min_x_read = NULL;
	delete attr_Limit_min_y_read;
	attr_Limit_min_y_read = NULL;
	delete attr_Limit_max_x_read;
	attr_Limit_max_x_read = NULL;
	delete attr_Limit_max_y_read;
	attr_Limit_max_y_read = NULL;
	delete attr_Overflow_threshold_read;
	attr_Overflow_threshold_read = NULL;
	delete attr_Interlock_status_read;
	attr_Interlock_status_read = NULL;
	delete attr_Status_x_read;
	attr_Status_x_read = NULL;
	delete attr_Status_y_read;
	attr_Status_y_read = NULL;
	delete attr_Status_adc_overflow_read;
	attr_Status_adc_overflow_read = NULL;

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::delete_device

}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaSinglePassE::init_device()
{
	DEBUG_STREAM << "LiberaSinglePassE::init_device() create device " << device_name << endl;

	/*----- PROTECTED REGION ID(LiberaSinglePassE::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	//	Initialize attributes
	attr_BufferSize_read = new Tango::DevLong(0);
	CHECK_ALLOC(attr_BufferSize_read);

	attr_AttenuationLevel_read = new Tango::DevLong(0);
	CHECK_ALLOC(attr_AttenuationLevel_read);

	attr_Temp1_read = new Tango::DevUShort(0);
	CHECK_ALLOC(attr_Temp1_read);

	attr_Temp2_read = new Tango::DevUShort(0);
	CHECK_ALLOC(attr_Temp2_read);

	attr_Temp3_read = new Tango::DevUShort(0);
	CHECK_ALLOC(attr_Temp3_read);

	attr_Fan1Speed_read = new Tango::DevUShort(0);
	CHECK_ALLOC(attr_Fan1Speed_read);

	attr_Fan2Speed_read = new Tango::DevUShort(0);
	CHECK_ALLOC(attr_Fan2Speed_read);

	attr_A_read = new Tango::DevShort[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_A_read)

	attr_B_read = new Tango::DevShort[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_B_read)

	attr_C_read = new Tango::DevShort[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_C_read)

	attr_D_read = new Tango::DevShort[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_D_read)

	attr_AT_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_AT_read)

	attr_BT_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_BT_read)

	attr_CT_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_CT_read)

	attr_DT_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_DT_read)

	attr_SumT_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_SumT_read)

	attr_Yposition_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_Yposition_read)

	attr_Xposition_read = new Tango::DevDouble[MAX_BUF_SIZE];
	CHECK_ALLOC(attr_Xposition_read)

	attr_Current_read = new Tango::DevDouble[MAX_CURRENT_BUF_SIZE];
	CHECK_ALLOC(attr_Current_read)

	attr_Calibration_ka_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Calibration_ka_read)

	attr_Calibration_kb_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Calibration_kb_read)

	attr_Calibration_kc_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Calibration_kc_read)

	attr_Calibration_kd_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Calibration_kd_read)

	attr_Linear_x_k_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_x_k_read)

	attr_Linear_x_offs_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_x_offs_read)

	attr_Linear_y_k_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_y_k_read)

	attr_Linear_y_offs_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_y_offs_read)

	attr_Linear_q_k_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_q_k_read)

	attr_Linear_q_offs_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_q_offs_read)

	attr_Linear_sum_k_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_sum_k_read)

	attr_Linear_sum_offs_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Linear_sum_offs_read)

	attr_Signal_expansion_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Signal_expansion_read)

	attr_Interlock_enabled_read = new Tango::DevBoolean(0);
	CHECK_ALLOC(attr_Interlock_enabled_read)

	attr_Limit_min_x_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Limit_min_x_read)

	attr_Limit_min_y_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Limit_min_y_read)

	attr_Limit_max_x_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Limit_max_x_read)

	attr_Limit_max_y_read = new Tango::DevDouble(0);
	CHECK_ALLOC(attr_Limit_max_y_read)

	attr_Overflow_threshold_read = new Tango::DevULong(0);
	CHECK_ALLOC(attr_Overflow_threshold_read)

	attr_Interlock_status_read = new Tango::DevULong(0);
	CHECK_ALLOC(attr_Interlock_status_read)

	attr_Status_x_read = new Tango::DevBoolean(0);
	CHECK_ALLOC(attr_Status_x_read)

	attr_Status_y_read = new Tango::DevBoolean(0);
	CHECK_ALLOC(attr_Status_y_read)

	attr_Status_adc_overflow_read = new Tango::DevBoolean(0);
	CHECK_ALLOC(attr_Status_adc_overflow_read)

	// Attributes that have local storage
	attr_TriggerCounter_read = &trig_ctr;

	// Initialize variables
	gettimeofday(&now, NULL);
	heartbeat_sec = now.tv_sec;
	trig_ctr = 0;
	old_trig_ctr = 0;
	*attr_BufferSize_read = 10;
	data_thread = NULL;

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::init_device_before

	//	Get the device properties (if any) from database
	get_device_property();


	/*----- PROTECTED REGION ID(LiberaSinglePassE::init_device) ENABLED START -----*/

	// Initialize variables that (might) rely on database value
	computed_buf_size = *attr_BufferSize_read - POINTS_AVERAGING;
	current_buf_size = (computed_buf_size - currentTimeOffset) / POINTS_PER_US;

	// Set device state
	set_state(Tango::ON);
	set_status(ON_STATUS);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::init_device
}



//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LiberaSinglePassE::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members
	liberaIpAddr = "127.0.0.1";
	liberaBoard = "";

	positionK = 0.0;
	currentK = 0.0;
	currentTimeOffset = -1;
	beamThreshold = 0.0;

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("LiberaBoard"));
	dev_prop.push_back(Tango::DbDatum("Location"));
	dev_prop.push_back(Tango::DbDatum("DataTaskHeartbeat"));
	dev_prop.push_back(Tango::DbDatum("BeamThreshold"));
	dev_prop.push_back(Tango::DbDatum("PositionK"));
	dev_prop.push_back(Tango::DbDatum("CurrentK"));
	dev_prop.push_back(Tango::DbDatum("CurrentTimeOffset"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on LiberaSinglePassEClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaSinglePassEClass	*ds_class =
			(static_cast<LiberaSinglePassEClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize LiberaBoard from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaBoard;
		else {
			//	Try to initialize LiberaBoard from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaBoard;
		}
		//	And try to extract LiberaBoard value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaBoard;

		//	Try to initialize Location from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  location;
		else {
			//	Try to initialize Location from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  location;
		}
		//	And try to extract Location value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  location;

		//	Try to initialize DataTaskHeartbeat from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dataTaskHeartbeat;
		else {
			//	Try to initialize DataTaskHeartbeat from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dataTaskHeartbeat;
		}
		//	And try to extract DataTaskHeartbeat value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dataTaskHeartbeat;

		//	Try to initialize BeamThreshold from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  beamThreshold;
		else {
			//	Try to initialize BeamThreshold from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  beamThreshold;
		}
		//	And try to extract BeamThreshold value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  beamThreshold;

		//	Try to initialize PositionK from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  positionK;
		else {
			//	Try to initialize PositionK from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  positionK;
		}
		//	And try to extract PositionK value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  positionK;

		//	Try to initialize CurrentK from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  currentK;
		else {
			//	Try to initialize CurrentK from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  currentK;
		}
		//	And try to extract CurrentK value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  currentK;

		//	Try to initialize CurrentTimeOffset from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  currentTimeOffset;
		else {
			//	Try to initialize CurrentTimeOffset from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  currentTimeOffset;
		}
		//	And try to extract CurrentTimeOffset value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  currentTimeOffset;


	}
	/*----- PROTECTED REGION ID(LiberaSinglePassE::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	if (positionK == 0.0) {
		cerr << "WARNING: Property PositionK for device " << get_name() << " not defined, default value of 1.0 taken!!" << endl;
		positionK = 1.0;
	}

	if (currentK == 0.0) {
		cerr << "WARNING: Property CurrentK for device " << get_name() << " not defined, default value of 1.0 taken!!" << endl;
		currentK = 1.0;
	}

	if (currentTimeOffset == -1) {
		cerr << "WARNING: Property CurrentTimeOffset for device " << get_name() << " not defined, default value of 0 taken!!" << endl;
		currentTimeOffset = 0;
	} else if (currentTimeOffset > (MAX_BUF_SIZE - POINTS_AVERAGING)) {
		cerr << "ERROR: Value too high for CurrentTimeOffset property" << endl;
		cerr << "Max possible value = " << MAX_BUF_SIZE - POINTS_AVERAGING << endl;
		Tango::Except::throw_exception("LiberaSinglePassE_BadProperty",
				"Value too high for CurrentTimeOffset property. Max value = 8188",
				"LiberaSinglePassE::get_device_property");
	}

	if (beamThreshold == 0.0) {
		cerr << "WARNING: Property BeamThreshold for device " << get_name() << " not defined, default value of 0.0 taken!!" << endl;
		beamThreshold = 0.0;
	}


	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::get_device_property_after

}


//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaSinglePassE::always_executed_hook()
{
	INFO_STREAM << "LiberaSinglePassE::always_executed_hook()  " << device_name << endl;

	/*----- PROTECTED REGION ID(LiberaSinglePassE::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	//if the user failed to specify libera board, connection is not possible
	if (liberaBoard.size() == 0){
		ERROR_STREAM_DS << "Libera board not specified. "<< endl;
		// Set device FAULT state
		set_state(Tango::FAULT);
		set_status("liberaBoard property not specified.");
		return;
	}
	//
	// MCI application daemon connection check
	//
	bool app_connected = false;
	bool app_reconnect = false;
	try {
		mci_application_root.GetFlags();
		app_connected = true;
		DEBUG_STREAM_DS << "MCI application daemon already connected!" <<  endl;
	} catch (istd::Exception &e) {
		ERROR_STREAM_DS << "MCI application daemon not connected!" <<  endl;

		app_reconnect = true;
	}

	if (app_reconnect) {
		app_connected = false;

		// Get rid of data thread first
		delete data_thread;
		data_thread = NULL;

		DEBUG_STREAM_DS << "forcing MCI application daemon disconnect" <<  endl;
		// Disconnect from MCI application daemon
		try {
			mci_application_root.Destroy();
			mci::Disconnect(liberaIpAddr, mci::Root::Application);
		} catch (istd::Exception &e) {
			ERROR_STREAM_DS << "MCI application daemon disconnect failed: "
					<< e.what() << endl;
		}

		DEBUG_STREAM_DS << "trying to connect MCI to application daemon" <<  endl;
		// Connect to MCI application daemon
		try {
			mci_application_root = mci::Connect(liberaIpAddr, mci::Root::Application);
			mci_application_root.GetFlags();
			app_connected = true;
			DEBUG_STREAM_DS << "MCI application daemon re-connected!" <<  endl;

			//creating a map of level enumerations after each connection, in case of changes

			std::string node = "boards." + liberaBoard + ".attenuation.gain_table." + "gt_";
			int lv = 0;
			while(lv < 32) {

				stringstream lvl;
				lvl << lv;
				std::string all = node + lvl.str() + ".dB";
				mci_level_gt = mci_application_root.GetNode(mci::Tokenize(all));
				uint32_t db;
				mci_level_gt.Get(db);
				std::string s = "gt_" + lvl.str();
				level_enumeration[db] = s;
				lv = lv + 1;
			}

		} catch (istd::Exception &e){
			ERROR_STREAM_DS << "MCI application daemon connect failed: "
					<< e.what() << endl;
		}

		// Did connection succeed?
		if (app_connected) {
			DEBUG_STREAM_DS << "connected to MCI application daemon" <<  endl;

			// Connect MCI application daemon nodes
			try {
				mci_LevelNodeSet = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".attenuation.att_id"));
				mci_adc_signal = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".signals.adc"));
				mci_Calibration_ka = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.ka"));
				mci_Calibration_kb = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.kb"));
				mci_Calibration_kc = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.kc"));
				mci_Calibration_kd = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.kd"));
				mci_Linear_x_k = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.x.k"));
				mci_Linear_x_offs = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.x.offs"));
				mci_Linear_y_k = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.y.k"));
				mci_Linear_y_offs = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.y.offs"));
				mci_Linear_q_k = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.q.k"));
				mci_Linear_q_offs = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.q.offs"));
				mci_Linear_sum_k = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.sum.k"));
				mci_Linear_sum_offs = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".calibration.linear.sum.offs"));
				mci_SignalExpansion = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.signal_expansion"));
				mci_InterlockEnabled = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.enabled"));
				mci_LimitMinX = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.limits.position.min.x"));
				mci_LimitMinY = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.limits.position.min.y"));
				mci_LimitMaxX = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.limits.position.max.x"));
				mci_LimitMaxY = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.limits.position.max.y"));
				mci_OverflowThreshold = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.limits.overflow.threshold"));
				mci_InterlockStatus = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.status"));
				mci_InterlockStatusX = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.status.x"));
				mci_InterlockStatusY = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.status.y"));
				mci_InterlockStatusADCOverflow = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.status.adc_overflow"));
				mci_InterlockStatusReset = mci_application_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".interlock.status.reset"));

				DEBUG_STREAM_DS << "connected MCI application daemon nodes" <<  endl;
			} catch (istd::Exception &e){
				ERROR_STREAM_DS << "MCI application nodes connect failed: "
						<< e.what() << endl;
			}

			DEBUG_STREAM_DS << "starting ADC data acquisition task" <<  endl;
			// Create MCI ADC data acquisition task
			assert(data_thread == NULL);
			try {
				data_thread = new LiberaSinglePassEDataTask(this, mci_adc_signal, dataTaskHeartbeat);
			} catch (...) {
				Tango::Except::throw_exception(
						"LiberaSinglePassE_CantStartDataTask",
						"Can't create the device data task",
						"LiberaSinglePassE::always_executed_hook()");
			}
			assert(data_thread != NULL);
		}
	}

	//
	// MCI platform daemon connection check
	//
	bool plat_connected = false;
	bool plat_reconnect = false;
	try {
		mci_platform_root.GetFlags();
		plat_connected = true;
		DEBUG_STREAM_DS << "MCI platform daemon already connected!" <<  endl;
	} catch (istd::Exception &e) {
		ERROR_STREAM_DS << "MCI platform daemon not connected!" <<  endl;

		plat_reconnect = true;
	}

	if (plat_reconnect) {
		plat_connected = false;

		DEBUG_STREAM_DS << "forcing MCI platform daemon disconnect" <<  endl;
		// Disconnect from MCI platform daemon
		try {
			mci_platform_root.Destroy();
			mci::Disconnect(liberaIpAddr, mci::Root::Platform);
		} catch (istd::Exception &e) {
			ERROR_STREAM_DS << "MCI platform daemon disconnect failed: "
					<< e.what() << endl;
		}

		DEBUG_STREAM_DS << "trying to connect MCI to platform daemon" <<  endl;
		// Connect to MCI platform daemon
		try {
			mci_platform_root = mci::Connect(liberaIpAddr, mci::Root::Platform);
			mci_platform_root.GetFlags();
			plat_connected = true;
			DEBUG_STREAM_DS << "MCI platform daemon re-connected!" <<  endl;
		} catch (istd::Exception &e){
			ERROR_STREAM_DS << "MCI platform daemon connect failed: "
					<< e.what() << endl;
		}

		// Did connection succeed?
		if (plat_connected) {
			DEBUG_STREAM_DS << "connected to MCI platform daemon" <<  endl;

			// Connect MCI platform daemon nodes
			try {
				// left side fans
				mci_fan_left_front = mci_platform_root.GetNode(mci::Tokenize("fans.left_front"));
				mci_fan_left_middle = mci_platform_root.GetNode(mci::Tokenize("fans.left_middle"));
				mci_fan_left_rear = mci_platform_root.GetNode(mci::Tokenize("fans.left_rear"));
				// right side fans
				mci_fan_right_front = mci_platform_root.GetNode(mci::Tokenize("fans.right_front"));
				mci_fan_right_middle = mci_platform_root.GetNode(mci::Tokenize("fans.right_middle"));
				mci_fan_right_rear = mci_platform_root.GetNode(mci::Tokenize("fans.right_rear"));

				// temperature from processing board sensor
				mci_temp1 = mci_platform_root.GetNode(mci::Tokenize("boards." + liberaBoard + ".sensors.ID_2.value"));
				// temperature from ICB board sensor
				mci_temp2 = mci_platform_root.GetNode(mci::Tokenize("boards.icb0.sensors.ID_8.value"));
				// temperature from EVRX board sensor
				mci_temp3 = mci_platform_root.GetNode(mci::Tokenize("boards.evrx2.sensors.ID_6.value"));

				DEBUG_STREAM_DS << "connected MCI platform daemon nodes" <<  endl;
			} catch (istd::Exception &e){
				ERROR_STREAM_DS << "MCI platform nodes connect failed: "
						<< e.what() << endl;
			}
		}
	}

	if (app_connected && plat_connected) {
		// Set device ON state
		set_state(Tango::ON);
		set_status(ON_STATUS);
	} else {
		// Set device FAULT state
		set_state(Tango::FAULT);
		if (! app_connected) {
			set_status("Not connected to Libera MCI application daemon");
		}
		if (! plat_connected) {
			set_status("Not connected to Libera MCI platform daemon");
		}
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::always_executed_hook
}



//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::read_attr_hardware()
 *	Description : Hardware acquisition for attributes.
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	//
	// Compute attributes from raw ADC data
	//

	struct timeval start, stop;

	gettimeofday(&start,NULL);
	if ((trig_ctr != old_trig_ctr) && (*attr_BufferSize_read >= MIN_POINTS)) {
		compute();
		old_trig_ctr = trig_ctr;
	}
	gettimeofday(&stop,NULL);
	float diff = (stop.tv_sec - start.tv_sec) + ((stop.tv_usec - start.tv_usec) / 1000000.0);
 	INFO_STREAM << "LiberaSinglePassE::read_attr_hardware(vector<long> &attr_list) Attribute computation took "<< diff << " sec"  << endl;

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_attr_hardware

}


//--------------------------------------------------------
/**
 *	Read BufferSize attribute
 *	Description: The Libera box ADC buffer size (between 10 and 8192)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_BufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_BufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_BufferSize) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_BufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_BufferSize
}

//--------------------------------------------------------
/**
 *	Write BufferSize attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_BufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_BufferSize(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_BufferSize) ENABLED START -----*/

	// Set the value of the attribute
	*attr_BufferSize_read = w_val;

	// Notify task that value has changed
	if (data_thread) {
		data_thread->mci_set_buffer_size(attr_BufferSize_read);
	}


	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_BufferSize
}

//--------------------------------------------------------
/**
 *	Read AttenuationLevel attribute
 *	Description: The analog channels level. This attribute allows the user to tune the analog channels
 *	             attenuator. The input is an index within a lookup table in the Libera box
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_AttenuationLevel(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_AttenuationLevel(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_AttenuationLevel) ENABLED START -----*/

	try {
		std::string board = "boards.";
		std::string level_enum;
		mci_LevelNodeSet.Get(level_enum);
		std::string levelG = ".attenuation.gain_table.";
		std::string dB = ".dB";
		std::string mci_LevelGNodeString = board + liberaBoard + levelG
				+ level_enum + dB;
		mci_LevelNodeGet = mci_application_root.GetNode(
				mci::Tokenize(mci_LevelGNodeString));
		uint32_t v;
		mci_LevelNodeGet.Get(v);
		*attr_AttenuationLevel_read = static_cast<Tango::DevLong>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_AttenuationLevel failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_AttenuationLevel_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_AttenuationLevel
}

//--------------------------------------------------------
/**
 *	Write AttenuationLevel attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_AttenuationLevel(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_AttenuationLevel(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_AttenuationLevel) ENABLED START -----*/

	try {
		*attr_AttenuationLevel_read = w_val;
		uint32_t val = static_cast<uint32_t>(w_val);
		std::string set = level_enumeration[val];
		mci_LevelNodeSet.Set(set);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_AttenuationLevel failed "
				<< device_name << e.what() << endl;
		ERROR_STREAM << "MCI ERROR caught : " << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_AttenuationLevel
}

//--------------------------------------------------------
/**
 *	Read TriggerCounter attribute
 *	Description: Trigger counter. Incremented at each trigger
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_TriggerCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_TriggerCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_TriggerCounter) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_TriggerCounter_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_TriggerCounter
}

//--------------------------------------------------------
/**
 *	Read Fan1Speed attribute
 *	Description: First fan speed
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Fan1Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Fan1Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan1Speed) ENABLED START -----*/

	try {
		double v1;
		double v2;
		double v3;
		double v;
		mci_fan_left_front.Get(v1);
		mci_fan_left_rear.Get(v2);
		mci_fan_left_middle.Get(v3);
		// get the minimum speed value of all three left fans
		v = v1;
		if (v2 < v) {
			v = v2;
		}
		if (v3 < v) {
			v = v3;
		}
		*attr_Fan1Speed_read = static_cast<Tango::DevUShort>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Fan1Speed() failed get value " << device_name << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Fan1Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan1Speed
}

//--------------------------------------------------------
/**
 *	Read Fan2Speed attribute
 *	Description: Second fan speed
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Fan2Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Fan2Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan2Speed) ENABLED START -----*/

	try {
		double v1;
		double v2;
		double v3;
		double v;
		mci_fan_right_front.Get(v1);
		mci_fan_right_rear.Get(v2);
		mci_fan_right_middle.Get(v3);
		// get the minimum speed value of all three right fans
		v = v1;
		if (v2 < v) {
			v = v2;
		}
		if (v3 < v) {
			v = v3;
		}
		*attr_Fan2Speed_read = static_cast<Tango::DevUShort>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Fan2Speed() failed get value " << device_name << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Fan2Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan2Speed
}

//--------------------------------------------------------
/**
 *	Read Temp1 attribute
 *	Description: The Libera box first temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp1) ENABLED START -----*/

	try {
		double v;
		mci_temp1.Get(v);
		*attr_Temp1_read = static_cast<Tango::DevUShort>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Temp1() failed get value " << device_name << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Temp1_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp1
}

//--------------------------------------------------------
/**
 *	Read Temp2 attribute
 *	Description: The Libera box second temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp2) ENABLED START -----*/

	try {
		double v;
		mci_temp2.Get(v);
		*attr_Temp2_read = static_cast<Tango::DevUShort>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Temp2() failed get value " << device_name << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Temp2_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp2
}

//--------------------------------------------------------
/**
 *	Read Temp3 attribute
 *	Description: The Libera box third temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp3) ENABLED START -----*/

	try {
		double v;
		mci_temp3.Get(v);
		*attr_Temp3_read = static_cast<Tango::DevUShort>(v);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Temp3() failed get value " << device_name << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Temp3_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp3
}
//--------------------------------------------------------
/**
 *	Read Calibration_ka attribute
 *	Description: Correction coefficient used for input signal amplitude
 *	             calibration
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_ka(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_ka(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_ka) ENABLED START -----*/

	try {
			double ka;
			mci_Calibration_ka.Get(ka);
			*attr_Calibration_ka_read = static_cast<Tango::DevDouble>(ka);
		} catch (istd::Exception &e) {
			ERROR_STREAM << "LiberaSinglePassE::read_Calibration_ka failed "
					<< device_name << e.what() << endl;
			return;
		}
	//	Set the attribute value
	attr.set_value(attr_Calibration_ka_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_ka
}

//--------------------------------------------------------
/**
 *	Write Calibration_ka attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_ka(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_ka(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_ka) ENABLED START -----*/

	try {
		*attr_Calibration_ka_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Calibration_ka.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Calibration_ka failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_ka
}

//--------------------------------------------------------
/**
 *	Read Calibration_kb attribute
 *	Description: Correction coefficient used for input signal amplitude
 *	             calibration
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kb(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kb(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kb) ENABLED START -----*/

	try {
		double kb;
		mci_Calibration_kb.Get(kb);
		*attr_Calibration_kb_read = static_cast<Tango::DevDouble>(kb);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Calibration_kb failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Calibration_kb_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kb
}

//--------------------------------------------------------
/**
 *	Write Calibration_kb attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kb(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kb(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kb) ENABLED START -----*/

	try {
		*attr_Calibration_kb_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Calibration_kb.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Calibration_kb failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kb
}

//--------------------------------------------------------
/**
 *	Read Calibration_kc attribute
 *	Description: Correction coefficient used for input signal amplitude
 *	             calibration
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kc(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kc(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kc) ENABLED START -----*/

	try {
		double kc;
		mci_Calibration_kc.Get(kc);
		*attr_Calibration_kc_read = static_cast<Tango::DevDouble>(kc);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Calibration_kc failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Calibration_kc_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kc
}

//--------------------------------------------------------
/**
 *	Write Calibration_kc attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kc(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kc(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kc) ENABLED START -----*/

	try {
		*attr_Calibration_kc_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Calibration_kc.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Calibration_kc failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kc
}

//--------------------------------------------------------
/**
 *	Read Calibration_kd attribute
 *	Description: Correction coefficient used for input signal amplitude
 *	             calibration
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kd(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kd(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kd) ENABLED START -----*/

	try {
		double kd;
		mci_Calibration_ka.Get(kd);
		*attr_Calibration_kd_read = static_cast<Tango::DevDouble>(kd);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Calibration_kd failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Calibration_kd_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kd
}

//--------------------------------------------------------
/**
 *	Write Calibration_kd attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kd(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kd(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kd) ENABLED START -----*/

	try {
		*attr_Calibration_kd_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Calibration_kd.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Calibration_kd failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kd
}

//--------------------------------------------------------
/**
 *	Read Linear_x_k attribute
 *	Description: Pickup inverse sensitivity coefficient
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_x_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_x_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_x_k) ENABLED START -----*/

	try {
		double x_k;
		mci_Linear_x_k.Get(x_k);
		*attr_Linear_x_k_read = static_cast<Tango::DevDouble>(x_k);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_x_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_x_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_x_k
}

//--------------------------------------------------------
/**
 *	Write Linear_x_k attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_x_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_x_k(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_x_k) ENABLED START -----*/

	try {
		*attr_Linear_x_k_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_x_k.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_x_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_x_k
}

//--------------------------------------------------------
/**
 *	Read Linear_x_offs attribute
 *	Description: Calibrates position offsets
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_x_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_x_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_x_offs) ENABLED START -----*/

	try {
		double x_offs;
		mci_Linear_x_k.Get(x_offs);
		*attr_Linear_x_offs_read = static_cast<Tango::DevDouble>(x_offs);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_x_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_x_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_x_offs
}

//--------------------------------------------------------
/**
 *	Write Linear_x_offs attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_x_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_x_offs(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_x_offs) ENABLED START -----*/

	try {
		*attr_Linear_x_offs_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_x_offs.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_x_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_x_offs
}

//--------------------------------------------------------
/**
 *	Read Linear_y_k attribute
 *	Description: Pickup inverse sensitivity coefficient.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_y_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_y_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_y_k) ENABLED START -----*/

	try {
		double y_k;
		mci_Linear_y_k.Get(y_k);
		*attr_Linear_y_k_read = static_cast<Tango::DevDouble>(y_k);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_y_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_y_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_y_k
}

//--------------------------------------------------------
/**
 *	Write Linear_y_k attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_y_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_y_k(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_y_k) ENABLED START -----*/

	try {
		*attr_Linear_y_k_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_y_k.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_y_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_y_k
}

//--------------------------------------------------------
/**
 *	Read Linear_y_offs attribute
 *	Description: Calibrates position offsets
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_y_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_y_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_y_offs) ENABLED START -----*/

	try {
		double y_offs;
		mci_Linear_y_offs.Get(y_offs);
		*attr_Linear_y_offs_read = static_cast<Tango::DevDouble>(y_offs);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_y_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_y_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_y_offs
}

//--------------------------------------------------------
/**
 *	Write Linear_y_offs attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_y_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_y_offs(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_y_offs) ENABLED START -----*/

	try {
		*attr_Linear_y_offs_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_y_offs.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_y_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_y_offs
}

//--------------------------------------------------------
/**
 *	Read Linear_q_k attribute
 *	Description: Scaling coefficient for q factor.
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_q_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_q_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_q_k) ENABLED START -----*/

	try {
		double q_k;
		mci_Linear_q_k.Get(q_k);
		*attr_Linear_q_k_read = static_cast<Tango::DevDouble>(q_k);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_q_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_q_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_q_k
}

//--------------------------------------------------------
/**
 *	Write Linear_q_k attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_q_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_q_k(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_q_k) ENABLED START -----*/

	try {
		*attr_Linear_q_k_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_q_k.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_q_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_q_k
}

//--------------------------------------------------------
/**
 *	Read Linear_q_offs attribute
 *	Description: Sets the offset for q factor.
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_q_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_q_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_q_offs) ENABLED START -----*/

	try {
		double q_offs;
		mci_Linear_q_offs.Get(q_offs);
		*attr_Linear_q_offs_read = static_cast<Tango::DevDouble>(q_offs);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_q_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_q_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_q_offs
}

//--------------------------------------------------------
/**
 *	Write Linear_q_offs attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_q_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_q_offs(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_q_offs) ENABLED START -----*/

	try {
		*attr_Linear_q_offs_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_q_offs.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_q_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_q_offs
}

//--------------------------------------------------------
/**
 *	Read Linear_sum_k attribute
 *	Description: Coefficient for sum value
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_sum_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_sum_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_sum_k) ENABLED START -----*/

	try {
		double sum_k;
		mci_Linear_sum_k.Get(sum_k);
		*attr_Linear_sum_k_read = static_cast<Tango::DevDouble>(sum_k);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_sum_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_sum_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_sum_k
}

//--------------------------------------------------------
/**
 *	Write Linear_sum_k attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_sum_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_sum_k(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_sum_k) ENABLED START -----*/

	try {
		*attr_Linear_sum_k_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_sum_k.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_sum_k failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_sum_k
}

//--------------------------------------------------------
/**
 *	Read Linear_sum_offs attribute
 *	Description: Coefficient for offsetting the sum value
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_sum_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_sum_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_sum_offs) ENABLED START -----*/

	try {
		double sum_offs;
		mci_Linear_sum_offs.Get(sum_offs);
		*attr_Linear_sum_offs_read = static_cast<Tango::DevDouble>(sum_offs);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Linear_sum_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Linear_sum_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_sum_offs
}

//--------------------------------------------------------
/**
 *	Write Linear_sum_offs attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_sum_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_sum_offs(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_sum_offs) ENABLED START -----*/

	try {
		*attr_Linear_sum_offs_read = w_val;
		double val = static_cast<double>(w_val);
		mci_Linear_sum_offs.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Linear_sum_offs failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_sum_offs
}

//--------------------------------------------------------
/**
 *	Read Signal_expansion attribute
 *	Description: Interlock output signal duration.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Signal_expansion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Signal_expansion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Signal_expansion) ENABLED START -----*/

	try {
		double Sig_exp;
		mci_SignalExpansion.Get(Sig_exp);
		*attr_Signal_expansion_read = static_cast<Tango::DevDouble>(Sig_exp);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Signal_expansion failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Signal_expansion_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Signal_expansion
}

//--------------------------------------------------------
/**
 *	Write Signal_expansion attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Signal_expansion(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Signal_expansion(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Signal_expansion) ENABLED START -----*/

	try {
		*attr_Signal_expansion_read = w_val;
		double val = static_cast<double>(w_val);
		mci_SignalExpansion.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Signal_expansion failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Signal_expansion
}

//--------------------------------------------------------
/**
 *	Read Interlock_enabled attribute
 *	Description: Enable / disable interlock functionality.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Interlock_enabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Interlock_enabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Interlock_enabled) ENABLED START -----*/

	try {
		bool intr_enab;
		mci_InterlockEnabled.Get(intr_enab);
		*attr_Signal_expansion_read = static_cast<Tango::DevBoolean>(intr_enab);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Interlock_enabled failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Interlock_enabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Interlock_enabled
}

//--------------------------------------------------------
/**
 *	Write Interlock_enabled attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Interlock_enabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Interlock_enabled(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Interlock_enabled) ENABLED START -----*/

	try {
		*attr_Interlock_enabled_read = w_val;
		bool val = static_cast<bool>(w_val);
		mci_InterlockEnabled.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Interlock_enabled failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Interlock_enabled
}

//--------------------------------------------------------
/**
 *	Read Limit_min_x attribute
 *	Description: Interlock limits parameter.
 *
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_min_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_min_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_min_x) ENABLED START -----*/

	try {
		double min_x;
		mci_LimitMinX.Get(min_x);
		*attr_Limit_min_x_read = static_cast<Tango::DevDouble>(min_x);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Limit_min_x failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Limit_min_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_min_x
}

//--------------------------------------------------------
/**
 *	Write Limit_min_x attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_min_x(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_min_x(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_min_x) ENABLED START -----*/

	try {
		*attr_Limit_min_x_read = w_val;
		double val = static_cast<double>(w_val);
		mci_LimitMinX.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Limit_min_x failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_min_x
}

//--------------------------------------------------------
/**
 *	Read Limit_min_y attribute
 *	Description: Interlock limits parameter.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_min_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_min_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_min_y) ENABLED START -----*/

	try {
		double min_y;
		mci_LimitMinY.Get(min_y);
		*attr_Limit_min_y_read = static_cast<Tango::DevDouble>(min_y);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Limit_min_y failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Limit_min_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_min_y
}

//--------------------------------------------------------
/**
 *	Write Limit_min_y attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_min_y(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_min_y(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_min_y) ENABLED START -----*/

	try {
		*attr_Limit_min_y_read = w_val;
		double val = static_cast<double>(w_val);
		mci_LimitMinY.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Limit_min_y failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_min_y
}

//--------------------------------------------------------
/**
 *	Read Limit_max_x attribute
 *	Description: Interlock limits parameter.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_max_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_max_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_max_x) ENABLED START -----*/

	try {
		double max_x;
		mci_LimitMaxX.Get(max_x);
		*attr_Limit_max_x_read = static_cast<Tango::DevDouble>(max_x);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Limit_max_x failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Limit_max_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_max_x
}

//--------------------------------------------------------
/**
 *	Write Limit_max_x attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_max_x(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_max_x(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_max_x) ENABLED START -----*/

	try {
		*attr_Limit_max_x_read = w_val;
		double val = static_cast<double>(w_val);
		mci_LimitMaxX.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Limit_max_x failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_max_x
}

//--------------------------------------------------------
/**
 *	Read Limit_max_y attribute
 *	Description: Interlock limits parameter.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_max_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_max_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_max_y) ENABLED START -----*/

	try {
		double max_y;
		mci_LimitMaxY.Get(max_y);
		*attr_Limit_max_y_read = static_cast<Tango::DevDouble>(max_y);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Limit_max_y failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Limit_max_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_max_y
}

//--------------------------------------------------------
/**
 *	Write Limit_max_y attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_max_y(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_max_y(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_max_y) ENABLED START -----*/

	try {
		*attr_Limit_max_y_read = w_val;
		double val = static_cast<double>(w_val);
		mci_LimitMaxY.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Limit_max_y failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_max_y
}

//--------------------------------------------------------
/**
 *	Read Overflow_threshold attribute
 *	Description: Interlock limits parameter.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Overflow_threshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Overflow_threshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Overflow_threshold) ENABLED START -----*/

	try {
		uint32_t thr;
		mci_OverflowThreshold.Get(thr);
		*attr_Overflow_threshold_read = static_cast<Tango::DevULong>(thr);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Overflow_threshold failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Overflow_threshold_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Overflow_threshold
}

//--------------------------------------------------------
/**
 *	Write Overflow_threshold attribute values to hardware.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Overflow_threshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Overflow_threshold(Tango::Attribute &attr) entering... " << endl;

	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);

	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Overflow_threshold) ENABLED START -----*/

	try {
		*attr_Overflow_threshold_read = w_val;
		uint32_t val = static_cast<uint32_t>(w_val);
		mci_OverflowThreshold.Set(val);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::write_Overflow_threshold failed "
				<< device_name << e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Overflow_threshold
}

//--------------------------------------------------------
/**
 *	Read Interlock_status attribute
 *	Description: Interlock status parameter.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Interlock_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Interlock_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Interlock_status) ENABLED START -----*/

	try {
		uint32_t stat;
		mci_InterlockStatus.Get(stat);
		*attr_Interlock_status_read = static_cast<Tango::DevULong>(stat);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Interlock_status failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Interlock_status_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Interlock_status
}
//--------------------------------------------------------
/**
 *	Read Status_x attribute
 *	Description: Interlock status parameter.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_x) ENABLED START -----*/

	try {
		bool statX;
		mci_InterlockStatusX.Get(statX);
		*attr_Status_x_read = static_cast<Tango::DevBoolean>(statX);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Status_x failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Status_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_x
}
//--------------------------------------------------------
/**
 *	Read Status_y attribute
 *	Description: Interlock status parameter.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_y) ENABLED START -----*/

	try {
		bool statY;
		mci_InterlockStatusY.Get(statY);
		*attr_Status_y_read = static_cast<Tango::DevBoolean>(statY);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Status_y failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Status_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_y
}
//--------------------------------------------------------
/**
 *	Read Status_adc_overflow attribute
 *	Description: Interlock status parameter.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_adc_overflow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_adc_overflow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_adc_overflow) ENABLED START -----*/

	try {
		bool adcOvfl;
		mci_InterlockStatusADCOverflow.Get(adcOvfl);
		*attr_Status_adc_overflow_read = static_cast<Tango::DevBoolean>(adcOvfl);
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::read_Status_adc_overflow failed "
				<< device_name << e.what() << endl;
		return;
	}

	//	Set the attribute value
	attr.set_value(attr_Status_adc_overflow_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_adc_overflow
}
//--------------------------------------------------------
/**
 *	Read A attribute
 *	Description: The A StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_A(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_A(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_A) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_A_read, *attr_BufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_A
}
//--------------------------------------------------------
/**
 *	Read B attribute
 *	Description: The B StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_B(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_B(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_B) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_B_read, *attr_BufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_B
}
//--------------------------------------------------------
/**
 *	Read C attribute
 *	Description: The C StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_C(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_C(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_C) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_C_read, *attr_BufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_C
}
//--------------------------------------------------------
/**
 *	Read D attribute
 *	Description: The D StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_D(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_D(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_D) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_D_read, *attr_BufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_D
}
//--------------------------------------------------------
/**
 *	Read AT attribute
 *	Description: The A StripLine ADC buffer after some computation:
 *	             square - double averaging filter - square root
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_AT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_AT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_AT) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_AT");
	}

	//	Set the attribute value
	attr.set_value(attr_AT_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_AT
}
//--------------------------------------------------------
/**
 *	Read BT attribute
 *	Description: The B StripLine ADC buffer after some computation:
 *	             square - double averaging filter - square root
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_BT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_BT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_BT) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_BT");
	}

	//	Set the attribute value
	attr.set_value(attr_BT_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_BT
}
//--------------------------------------------------------
/**
 *	Read CT attribute
 *	Description: The C StripLine ADC buffer after some computation:
 *	             square - double averaging filter - square root
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_CT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_CT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_CT) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_CT");
	}

	//	Set the attribute value
	attr.set_value(attr_CT_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_CT
}
//--------------------------------------------------------
/**
 *	Read DT attribute
 *	Description: The D StripLine ADC buffer after some computation:
 *	             square - double averaging filter - square root
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_DT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_DT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_DT) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_DT");
	}

	//	Set the attribute value
	attr.set_value(attr_DT_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_DT
}
//--------------------------------------------------------
/**
 *	Read Yposition attribute
 *	Description: Beam Y position (vertical)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Yposition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Yposition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Yposition) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_Yposition");
	}

	//	Set the attribute value
	attr.set_value(attr_Yposition_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Yposition
}
//--------------------------------------------------------
/**
 *	Read Xposition attribute
 *	Description: Beam X position (horizontal)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Xposition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Xposition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Xposition) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_Xposition");
	}

	//	Set the attribute value
	attr.set_value(attr_Xposition_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Xposition
}
//--------------------------------------------------------
/**
 *	Read Current attribute
 *	Description: Beam current computed from strip lines data
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 100
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Current(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Current(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Current) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_Current");
	}

	//	Set the attribute value
	attr.set_value(attr_Current_read, current_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Current
}
//--------------------------------------------------------
/**
 *	Read SumT attribute
 *	Description: Sum of the 4 computed ADC outputs (the xxxT attributes)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_SumT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_SumT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_SumT) ENABLED START -----*/

	if (*attr_BufferSize_read < MIN_POINTS) {
		Tango::Except::throw_exception("LiberaSinglePassE_NotEnoughPoints",
				"Not enough points read from Libera box",
				"LiberaSinglePassE::read_SumT");
	}

	//	Set the attribute value
	attr.set_value(attr_SumT_read, computed_buf_size);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_SumT
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassEClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void LiberaSinglePassE::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::Class::add_dynamic_attributes

}



//========================================================
//	Command execution methods
//========================================================

//--------------------------------------------------------
/**
 *	Execute the Reset command:
 *	Description: Reset the device in case of fault
 *
 *	@param argin
 *	@returns
 */
//--------------------------------------------------------
void LiberaSinglePassE::reset()
{
	DEBUG_STREAM << "LiberaSinglePassE::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::reset) ENABLED START -----*/

	//	Add your own code
	set_state(Tango::ON);
	set_status(ON_STATUS);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::reset

}

//--------------------------------------------------------
/**
 *	Execute the ResetTrigger command:
 *	Description: Reset the trigger counter
 *
 *	@param argin
 *	@returns
 */
//--------------------------------------------------------
void LiberaSinglePassE::reset_trigger()
{
	DEBUG_STREAM << "LiberaSinglePassE::ResetTrigger()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::reset_trigger) ENABLED START -----*/

	//	Add your own code
	*attr_TriggerCounter_read=0;

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::reset_trigger

}

//--------------------------------------------------------
/**
 *	Execute the ResetInterlockStatus command:
 *	Description: Resets the status register after the interlock was enabled.
 *
 *	@param argin
 *	@returns
 */
//--------------------------------------------------------
void LiberaSinglePassE::reset_interlock_status()
{
	DEBUG_STREAM << "LiberaSinglePassE::ResetInterlockStatus()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::reset_interlock_status) ENABLED START -----*/

	try {
		mci_InterlockStatusReset.Set("Execute");
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::reset_status failed " << device_name
				<< e.what() << endl;
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::reset_interlock_status

}

//--------------------------------------------------------
/**
 *	Execute the MagicCommand command:
 *	Description: Command receives an input string and returns the node path and node value.
 *	             The input string can be ``dump`` for the entire mci dump or
 *	             node path string for the specific node value.
 *
 *	@param argin
 *	@returns
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaSinglePassE::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaSinglePassE::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::magic_command) ENABLED START -----*/

	//	Add your own code
	CORBA::ULong count = 0;
	argout = new Tango::DevVarStringArray(1);
	argout->length(1);
	try {

		if (std::string(argin) == "dump") {
			// recursively traverse the whole MCI tree
			dump_mci_tree(mci_application_root, argout, &count);
		} else {
			// handle a single MCI node
			mci::Node node = mci_application_root.GetNode(mci::Tokenize(std::string(argin)));
			std::string s = mci::ToString(node.GetRelPath());
			if (node.GetValueType() != mci::eNvUndefined && node.IsReadable()) {
				s = s + "=" + node.ToString(0);
			}
			(*argout)[0] = CORBA::string_dup(s.c_str());
		}
	} catch (istd::Exception &e) {
		ERROR_STREAM << "LiberaSinglePassE::magic command failed " << device_name
						<< e.what() << endl;
		std::string s = "LiberaSinglePassE::magic command failed " + device_name + "\n" + e.what();
		(*argout)[0] = CORBA::string_dup(s.c_str());
	}

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::magic_command

	return argout;
}


	/*----- PROTECTED REGION ID(LiberaSinglePassE::namespace_ending) ENABLED START -----*/

	//	Additional Methods

void LiberaSinglePassE::dump_mci_tree(const mci::Node &node, Tango::DevVarStringArray *store, CORBA::ULong *count) {

	for (size_t i = 0; i < node.GetNodeCount(); ++i) {
		mci::Node child = node.GetNode(i);

		CORBA::ULong len = store->length();
		if (*count >= len) {
			store->length(len + 1);
		}

		// get the MCI node path
		std::string s = mci::ToString(child.GetRelPath());

		// get the MCI node value if it is readable
		if (child.GetValueType() != mci::eNvUndefined && child.IsReadable()) {
			s = s + "=" + child.ToString(0);
		}

		// store the string
		(*store)[*count] = CORBA::string_dup(s.c_str());
		// next position
		*count = *count + 1;

		// call recursively
		dump_mci_tree(child, store, count);
	}
}

//+----------------------------------------------------------------------------
//
// method : 		LiberaSinglePassE::compute
//
// description : 	Compute the computed attributes:
//					UpT, DownT, LeftT, RightT
//					X and Z position
//					Current
//
//-----------------------------------------------------------------------------
void LiberaSinglePassE::compute()
{
//
// Computed attribute size
//

	computed_buf_size = *attr_BufferSize_read - POINTS_AVERAGING;

//
// Compute xxxT attributes
//

	compute_T_attr(attr_A_read, attr_AT_read);
	compute_T_attr(attr_B_read, attr_BT_read);
	compute_T_attr(attr_C_read, attr_CT_read);
	compute_T_attr(attr_D_read, attr_DT_read);

//
// Compute data sum
//

	int loop;
	for (loop = 0; loop < computed_buf_size; loop++) {
		attr_SumT_read[loop] = attr_AT_read[loop] + \
				attr_BT_read[loop] + \
				attr_CT_read[loop] + \
				attr_DT_read[loop];
	}

//
// Compute positions
//

	compute_pos_attr();

//
// Compute current attribute
//

	compute_current_attr();

}

//+----------------------------------------------------------------------------
//
// method : 		LiberaSinglePassE::compute_T_attr
//
// description : Compute one xxxT attribute
//
// in : - raw_data: The read raw data
//		- comp_data: Buffer where the computed data must be stored
//
//-----------------------------------------------------------------------------
void LiberaSinglePassE::compute_T_attr(Tango::DevShort *raw_data,Tango::DevDouble *comp_data)
{
	//when calculating num, the sum of squares can be larger than Long data type
	Tango::DevDouble square[MAX_BUF_SIZE];
	int loop;

	for (loop = 0; loop < *attr_BufferSize_read; loop++) {
		square[loop] = raw_data[loop] * raw_data[loop];
	}

	for (loop = 0; loop < computed_buf_size; loop++) {
		Tango::DevDouble num = Tango::DevDouble(square[loop] + \
			2 * (square[loop + 1] + square[loop + 2] + \
				square[loop + 3]) + square[loop + 4]);
		comp_data[loop] = sqrt(num / 8.0);
	}
}


//+----------------------------------------------------------------------------
//
// method : 		LiberaSinglePassE::compute_pos_attr
//
// description : Compute the two position attributes
//
//-----------------------------------------------------------------------------
void LiberaSinglePassE::compute_pos_attr()
{
	int loop;

	for (loop = 0; loop < computed_buf_size; loop++) {
		if (attr_SumT_read[loop] < beamThreshold) {
			attr_Xposition_read[loop] = nan("NaN");
			attr_Yposition_read[loop] = nan("NaN");
		} else {


// view of the buttons/pickups
//      B
//   A     C
//      D
// in this case the calculation is done as follows:
//  X = (A-C) / (A+C)
//  Y = (B-D) / (B+D)

			Tango::DevDouble tmp_data =
					(attr_BT_read[loop] - attr_DT_read[loop]) /
					(attr_BT_read[loop] + attr_DT_read[loop]);
			attr_Yposition_read[loop] = positionK * tmp_data;
			tmp_data =
					(attr_AT_read[loop] - attr_CT_read[loop]) /
					(attr_AT_read[loop] + attr_CT_read[loop]);
			attr_Xposition_read[loop] = positionK * tmp_data;
		}
	}
}

//+----------------------------------------------------------------------------
//
// method : 		LiberaSinglePassE::compute_current_attr
//
// description : Compute the current attributes
//
//-----------------------------------------------------------------------------
void LiberaSinglePassE::compute_current_attr()
{
	current_buf_size = (computed_buf_size - currentTimeOffset) / POINTS_PER_US;

	int loop,ctr;

	for (loop = 0; loop < current_buf_size; loop++) {
		double tmp_sum = 0.0;
		for (ctr = 0; ctr < POINTS_PER_US; ctr++) {
			int ind = ctr + currentTimeOffset + (POINTS_PER_US * loop);
			if (attr_SumT_read[ind] >= beamThreshold) {
				tmp_sum = tmp_sum + attr_SumT_read[ind];
			}
		}
		attr_Current_read[loop] = currentK * tmp_sum;
	}
}


	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::namespace_ending
} //	namespace
