/*----- PROTECTED REGION ID(LiberaSinglePassE.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaSinglePassE.cpp
//
// description : C++ source for the LiberaSinglePassE and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaSinglePassE are implemented in this file.
//
// project :     Libera Brillance Single Pass E.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaSinglePassE.h>
#include <LiberaSinglePassEClass.h>
//#include <LiberaSinglePassEDataTask.h>

#include "LiberaClient.h"

/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE.cpp

/**
 *  LiberaSinglePassE class description:
 *    This Tango class is the interface of the Instrumentation Technologies (IT) Libera
 *    Brilliance Single Pass E equipment. This class supports only a subset of all the
 *    equipment features. It is the basic equipment for a Injection and Transfer Efficiency
 *    Measurement System
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//================================================================
//  State                 |  Inherited (no method)
//  Status                |  Inherited (no method)
//  Reset                 |  reset
//  ResetInterlockStatus  |  reset_interlock_status
//  MagicCommand          |  magic_command
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ADCBufferSize           |  Tango::DevLong	Scalar
//  TriggerCounter          |  Tango::DevULong64	Scalar
//  Fan1Speed               |  Tango::DevUShort	Scalar
//  Fan2Speed               |  Tango::DevUShort	Scalar
//  Temp1                   |  Tango::DevUShort	Scalar
//  Temp2                   |  Tango::DevUShort	Scalar
//  Temp3                   |  Tango::DevUShort	Scalar
//  Calibration_ka          |  Tango::DevDouble	Scalar
//  Calibration_kb          |  Tango::DevDouble	Scalar
//  Calibration_kc          |  Tango::DevDouble	Scalar
//  Calibration_kd          |  Tango::DevDouble	Scalar
//  Linear_x_k              |  Tango::DevDouble	Scalar
//  Linear_x_offs           |  Tango::DevDouble	Scalar
//  Linear_y_k              |  Tango::DevDouble	Scalar
//  Linear_y_offs           |  Tango::DevDouble	Scalar
//  Linear_q_k              |  Tango::DevDouble	Scalar
//  Linear_q_offs           |  Tango::DevDouble	Scalar
//  Linear_sum_k            |  Tango::DevDouble	Scalar
//  Linear_sum_offs         |  Tango::DevDouble	Scalar
//  Signal_expansion        |  Tango::DevDouble	Scalar
//  Interlock_enabled       |  Tango::DevBoolean	Scalar
//  Limit_min_x             |  Tango::DevDouble	Scalar
//  Limit_min_y             |  Tango::DevDouble	Scalar
//  Limit_max_x             |  Tango::DevDouble	Scalar
//  Limit_max_y             |  Tango::DevDouble	Scalar
//  Overflow_threshold      |  Tango::DevULong	Scalar
//  Interlock_status        |  Tango::DevULong	Scalar
//  Status_x                |  Tango::DevBoolean	Scalar
//  Status_y                |  Tango::DevBoolean	Scalar
//  Status_adc_overflow     |  Tango::DevBoolean	Scalar
//  X                       |  Tango::DevDouble	Scalar
//  Y                       |  Tango::DevDouble	Scalar
//  Sum                     |  Tango::DevDouble	Scalar
//  EnableADC               |  Tango::DevBoolean	Scalar
//  Q                       |  Tango::DevDouble	Scalar
//  External_trigger_delay  |  Tango::DevULong	Scalar
//  Attenuation_id          |  Tango::DevShort	Scalar
//  Attenuation_mode        |  Tango::DevShort	Scalar
//  Bunch_Threshold         |  Tango::DevULong	Scalar
//  ADCChannelA             |  Tango::DevShort	Spectrum  ( max = 10000)
//  ADCChannelB             |  Tango::DevShort	Spectrum  ( max = 10000)
//  ADCChannelC             |  Tango::DevShort	Spectrum  ( max = 10000)
//  ADCChannelD             |  Tango::DevShort	Spectrum  ( max = 10000)
//================================================================

namespace LiberaSinglePassE_ns
{
/*----- PROTECTED REGION ID(LiberaSinglePassE::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::LiberaSinglePassE()
 *	Description : Constructors for a Tango device
 *                implementing the classLiberaSinglePassE
 */
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_1
}
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_2
}
//--------------------------------------------------------
LiberaSinglePassE::LiberaSinglePassE(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaSinglePassE::delete_device()
{
	DEBUG_STREAM << "LiberaSinglePassE::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::delete_device) ENABLED START -----*/

        if (m_libera) {
            m_libera->Disconnect();
            delete m_libera;
            m_libera = NULL;
        }    

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaSinglePassE::init_device()
{
	DEBUG_STREAM << "LiberaSinglePassE::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LiberaSinglePassE::init_device) ENABLED START -----*/
	//	Initialize device
        m_libera = new LiberaClient(this);

        m_spe = "boards." + liberaBoard + ".";
        
        // ADC calibration attributes
        m_libera->AddScalar<Tango::DevDouble>(
            m_spe + "calibration.ka", attr_Calibration_ka_read);
        m_libera->AddScalar<Tango::DevDouble>(
            m_spe + "calibration.kb", attr_Calibration_kb_read);
        m_libera->AddScalar<Tango::DevDouble>(
            m_spe + "calibration.kc", attr_Calibration_kc_read);
        m_libera->AddScalar<Tango::DevDouble>(
            m_spe + "calibration.kd", attr_Calibration_kd_read);

        // Position calibration attributes
        m_libera->AddScalar(
            m_spe + "calibration.linear.x.k",
            attr_Linear_x_k_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.x.offs",
            attr_Linear_x_offs_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.y.k",
            attr_Linear_y_k_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.y.offs",
            attr_Linear_y_offs_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.q.k",
            attr_Linear_q_k_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.q.offs",
            attr_Linear_q_offs_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.sum.k",
            attr_Linear_sum_k_read);
        m_libera->AddScalar(
            m_spe + "calibration.linear.sum.offs",
            attr_Linear_sum_offs_read);
        
        // Interlock attributes
        m_libera->AddScalar(
            m_spe + "interlock.signal_expansion",
            attr_Signal_expansion_read);
        m_libera->AddScalar(
            m_spe + "interlock.enabled",
            attr_Interlock_enabled_read);
        m_libera->AddScalar(
            m_spe + "interlock.status",
            attr_Interlock_status_read);
        m_libera->AddScalar(
            m_spe + "interlock.limits.position.min.x",
            attr_Limit_min_x_read);
        m_libera->AddScalar(
            m_spe + "interlock.limits.position.min.y",
            attr_Limit_min_y_read);
        m_libera->AddScalar(
            m_spe + "interlock.limits.position.max.x",
            attr_Limit_max_x_read);
        m_libera->AddScalar(
            m_spe + "interlock.limits.position.max.y",
            attr_Limit_max_y_read);
        m_libera->AddScalar(
            m_spe + "interlock.limits.overflow.threshold",
            attr_Overflow_threshold_read);
        m_libera->AddScalar(
            m_spe + "interlock.status.x",
            attr_Status_x_read);
        m_libera->AddScalar(
            m_spe + "interlock.status.y",
            attr_Status_y_read);
        m_libera->AddScalar(
            m_spe + "interlock.status.adc_overflow",
            attr_Status_adc_overflow_read);

        //Gain Control
        m_libera->AddScalar(
            m_spe + "attenuation.mode",
			attr_Attenuation_mode_read);

        m_libera->AddScalar(
            m_spe + "attenuation.att_id",
			attr_Attenuation_id_read);

        //DSP Control
        m_libera->AddScalar(
            m_spe + "dsp_control.bunch_thr1",
			attr_Bunch_Threshold_read);

        m_libera->AddScalar(
            m_spe + "ltim.trigger_offset",
            attr_External_trigger_delay_read);

        //Platform Fans
        m_libera->AddScalarPM(
            "fans.left_",
            attr_Fan1Speed_read,
            LiberaAttr::FAN2USHORT);
        m_libera->AddScalarPM(
            "fans.right_",
            attr_Fan2Speed_read,
            LiberaAttr::FAN2USHORT);
        
        // Temperature attributes
        // TODO: these could be doubles
        m_libera->AddScalarPM(
            "boards." + liberaBoard + ".sensors.ID_2.value", 
            attr_Temp1_read, 
            LiberaAttr::DBL2USHORT);

        m_libera->AddScalarPM(
            "boards.icb0.sensors.ID_8.value",
            attr_Temp2_read,
            LiberaAttr::DBL2USHORT);

        m_libera->AddScalarPM(
            "boards.evrx2.sensors.ID_6.value",
            attr_Temp3_read,
            LiberaAttr::DBL2USHORT);
  
        m_signalSPE = m_libera->AddSignal<Tango::DevDouble>(
            m_spe + "signals.spe",
            1,
            m_spe_enabled,
            m_spe_buffer_size,
            m_spe_va,
            m_spe_vb,
            m_spe_vc,
            m_spe_vd,
            m_spe_sum,
            m_spe_q,
            m_spe_x,
            m_spe_y,
            m_spe_trigger_cnt,
            m_spe_bunch_cnt,
            m_spe_status,
            m_spe_mode,
            m_spe_r2,
            m_spe_r3,
            m_spe_timestamp_h,
            m_spe_timestamp_l);

        m_signalSPE->SetPeriod(0); // stream waits in read
        m_signalSPE->Enable();
        m_signalSPE->SetNotifier(
            &LiberaSinglePassE::_SPECallback,
            reinterpret_cast<void*>(this));
 
        attr_Sum_read = m_spe_sum;
        attr_Q_read = m_spe_q;
        attr_X_read = m_spe_x;
        attr_Y_read = m_spe_y;

        m_signalEvent = m_libera->AddSignal<Tango::DevULong64>(
            m_spe + "signals.event",
            1,
            m_event_enabled,
            m_event_buffer_size,
            m_event_id,
            m_event_count,
            m_event_timestamp,
            m_event_data);

        m_signalEvent->SetPeriod(0); // stream waits in read
        m_signalEvent->Enable();
        m_signalEvent->SetNotifier(
            &LiberaSinglePassE::_EventCallback,
            reinterpret_cast<void*>(this));

        attr_TriggerCounter_read = m_event_count;

        m_signalADC = m_libera->AddSignal<Tango::DevShort>(
            m_spe + "signals.adc",
            512,
            attr_EnableADC_read,
            attr_ADCBufferSize_read,
            attr_ADCChannelA_read,
            attr_ADCChannelB_read,
            attr_ADCChannelC_read,
            attr_ADCChannelD_read);

        m_signalADC->SetPeriod(500);
        m_signalADC->Enable();

        set_change_event("TriggerCounter", true, false);
        set_change_event("X", true, false);
        set_change_event("Y", true, false);
        set_change_event("Q", true, false);
        set_change_event("Sum", true, false);


        //Initiate Settings from properties
        init_settings();

        if (m_libera->Connect()) {
            set_state(Tango::ON);
            set_status(ON_STATUS);
        }
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LiberaSinglePassE::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members
	liberaIpAddr = "127.0.0.1";
	liberaBoard = "";

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("LiberaBoard"));
	dev_prop.push_back(Tango::DbDatum("Location"));
	dev_prop.push_back(Tango::DbDatum("Single_Pass_Threshold"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LiberaSinglePassEClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaSinglePassEClass	*ds_class =
			(static_cast<LiberaSinglePassEClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize LiberaBoard from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaBoard;
		else {
			//	Try to initialize LiberaBoard from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaBoard;
		}
		//	And try to extract LiberaBoard value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaBoard;

		//	Try to initialize Location from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  location;
		else {
			//	Try to initialize Location from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  location;
		}
		//	And try to extract Location value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  location;

		//	Try to initialize Single_Pass_Threshold from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  single_Pass_Threshold;
		else {
			//	Try to initialize Single_Pass_Threshold from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  single_Pass_Threshold;
		}
		//	And try to extract Single_Pass_Threshold value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  single_Pass_Threshold;

	}

	/*----- PROTECTED REGION ID(LiberaSinglePassE::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaSinglePassE::always_executed_hook()
{
	INFO_STREAM << "LiberaSinglePassE::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::always_executed_hook) ENABLED START -----*/

        if (m_libera->IsConnected()) {
                // Set device ON state
                set_state(Tango::ON);
                set_status(ON_STATUS);
        }
        else {
                set_state(Tango::FAULT);
                set_status("Not connected to Libera MCI daemon");
        } 

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaSinglePassE::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaSinglePassE::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute ADCBufferSize related method
 *	Description: The Libera box ADC buffer size (between 10 and 8192)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_ADCBufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_ADCBufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ADCBufferSize) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ADCBufferSize_read);
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ADCBufferSize
}
//--------------------------------------------------------
/**
 *	Write attribute ADCBufferSize related method
 *	Description: The Libera box ADC buffer size (between 10 and 8192)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_ADCBufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_ADCBufferSize(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_ADCBufferSize) ENABLED START -----*/
	
        // Set the value of the attribute
        m_signalADC->Realloc(w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_ADCBufferSize
}
//--------------------------------------------------------
/**
 *	Read attribute TriggerCounter related method
 *	Description: Trigger counter. Incremented at each trigger
 *
 *	Data type:	Tango::DevULong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_TriggerCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_TriggerCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_TriggerCounter) ENABLED START -----*/

	//	Set the attribute value
        attr.set_value(attr_TriggerCounter_read);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_TriggerCounter
}
//--------------------------------------------------------
/**
 *	Read attribute Fan1Speed related method
 *	Description: First fan speed
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Fan1Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Fan1Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan1Speed) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Fan1Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan1Speed
}
//--------------------------------------------------------
/**
 *	Read attribute Fan2Speed related method
 *	Description: Second fan speed
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Fan2Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Fan2Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Fan2Speed) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Fan2Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Fan2Speed
}
//--------------------------------------------------------
/**
 *	Read attribute Temp1 related method
 *	Description: The Libera box first temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp1) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp1_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp1
}
//--------------------------------------------------------
/**
 *	Read attribute Temp2 related method
 *	Description: The Libera box second temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp2) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp2_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp2
}
//--------------------------------------------------------
/**
 *	Read attribute Temp3 related method
 *	Description: The Libera box third temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Temp3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Temp3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Temp3) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp3_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Temp3
}
//--------------------------------------------------------
/**
 *	Read attribute Calibration_ka related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_ka(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_ka(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_ka) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Calibration_ka_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_ka
}
//--------------------------------------------------------
/**
 *	Write attribute Calibration_ka related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_ka(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_ka(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_ka) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Calibration_ka_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_ka
}
//--------------------------------------------------------
/**
 *	Read attribute Calibration_kb related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kb(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kb(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kb) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Calibration_kb_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kb
}
//--------------------------------------------------------
/**
 *	Write attribute Calibration_kb related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kb(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kb(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kb) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Calibration_kb_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kb
}
//--------------------------------------------------------
/**
 *	Read attribute Calibration_kc related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kc(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kc(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kc) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Calibration_kc_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kc
}
//--------------------------------------------------------
/**
 *	Write attribute Calibration_kc related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kc(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kc(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kc) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Calibration_kc_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kc
}
//--------------------------------------------------------
/**
 *	Read attribute Calibration_kd related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Calibration_kd(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Calibration_kd(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Calibration_kd) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Calibration_kd_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Calibration_kd
}
//--------------------------------------------------------
/**
 *	Write attribute Calibration_kd related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Calibration_kd(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Calibration_kd(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Calibration_kd) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Calibration_kd_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Calibration_kd
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_x_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_x_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_x_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_x_k) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_x_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_x_k
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_x_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_x_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_x_k(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_x_k) ENABLED START -----*/
        
        m_libera->UpdateScalar(attr_Linear_x_k_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_x_k
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_x_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_x_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_x_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_x_offs) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_x_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_x_offs
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_x_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_x_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_x_offs(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_x_offs) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_x_offs_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_x_offs
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_y_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_y_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_y_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_y_k) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_y_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_y_k
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_y_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_y_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_y_k(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_y_k) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_y_k_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_y_k
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_y_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_y_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_y_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_y_offs) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_y_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_y_offs
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_y_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_y_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_y_offs(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_y_offs) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_y_offs_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_y_offs
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_q_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_q_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_q_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_q_k) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_q_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_q_k
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_q_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_q_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_q_k(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_q_k) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_q_k_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_q_k
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_q_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_q_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_q_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_q_offs) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_q_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_q_offs
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_q_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_q_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_q_offs(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_q_offs) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_q_offs_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_q_offs
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_sum_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_sum_k(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_sum_k(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_sum_k) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_sum_k_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_sum_k
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_sum_k related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_sum_k(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_sum_k(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_sum_k) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_sum_k_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_sum_k
}
//--------------------------------------------------------
/**
 *	Read attribute Linear_sum_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Linear_sum_offs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Linear_sum_offs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Linear_sum_offs) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Linear_sum_offs_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Linear_sum_offs
}
//--------------------------------------------------------
/**
 *	Write attribute Linear_sum_offs related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Linear_sum_offs(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Linear_sum_offs(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Linear_sum_offs) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Linear_sum_offs_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Linear_sum_offs
}
//--------------------------------------------------------
/**
 *	Read attribute Signal_expansion related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Signal_expansion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Signal_expansion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Signal_expansion) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Signal_expansion_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Signal_expansion
}
//--------------------------------------------------------
/**
 *	Write attribute Signal_expansion related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Signal_expansion(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Signal_expansion(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Signal_expansion) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Signal_expansion_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Signal_expansion
}
//--------------------------------------------------------
/**
 *	Read attribute Interlock_enabled related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Interlock_enabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Interlock_enabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Interlock_enabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Interlock_enabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Interlock_enabled
}
//--------------------------------------------------------
/**
 *	Write attribute Interlock_enabled related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Interlock_enabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Interlock_enabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Interlock_enabled) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Interlock_enabled_read, w_val);
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Interlock_enabled
}
//--------------------------------------------------------
/**
 *	Read attribute Limit_min_x related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_min_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_min_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_min_x) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Limit_min_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_min_x
}
//--------------------------------------------------------
/**
 *	Write attribute Limit_min_x related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_min_x(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_min_x(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_min_x) ENABLED START -----*/
        
        m_libera->UpdateScalar(attr_Limit_min_x_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_min_x
}
//--------------------------------------------------------
/**
 *	Read attribute Limit_min_y related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_min_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_min_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_min_y) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Limit_min_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_min_y
}
//--------------------------------------------------------
/**
 *	Write attribute Limit_min_y related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_min_y(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_min_y(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_min_y) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Limit_min_y_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_min_y
}
//--------------------------------------------------------
/**
 *	Read attribute Limit_max_x related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_max_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_max_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_max_x) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Limit_max_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_max_x
}
//--------------------------------------------------------
/**
 *	Write attribute Limit_max_x related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_max_x(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_max_x(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_max_x) ENABLED START -----*/
        
        m_libera->UpdateScalar(attr_Limit_max_x_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_max_x
}
//--------------------------------------------------------
/**
 *	Read attribute Limit_max_y related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Limit_max_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Limit_max_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Limit_max_y) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Limit_max_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Limit_max_y
}
//--------------------------------------------------------
/**
 *	Write attribute Limit_max_y related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Limit_max_y(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Limit_max_y(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Limit_max_y) ENABLED START -----*/

        m_libera->UpdateScalar(attr_Limit_max_y_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Limit_max_y
}
//--------------------------------------------------------
/**
 *	Read attribute Overflow_threshold related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Overflow_threshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Overflow_threshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Overflow_threshold) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Overflow_threshold_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Overflow_threshold
}
//--------------------------------------------------------
/**
 *	Write attribute Overflow_threshold related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Overflow_threshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Overflow_threshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Overflow_threshold) ENABLED START -----*/
        
        m_libera->UpdateScalar(attr_Overflow_threshold_read, w_val);
	
        /*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Overflow_threshold
}
//--------------------------------------------------------
/**
 *	Read attribute Interlock_status related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Interlock_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Interlock_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Interlock_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Interlock_status_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Interlock_status
}
//--------------------------------------------------------
/**
 *	Read attribute Status_x related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_x(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_x(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_x) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Status_x_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_x
}
//--------------------------------------------------------
/**
 *	Read attribute Status_y related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_y) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Status_y_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_y
}
//--------------------------------------------------------
/**
 *	Read attribute Status_adc_overflow related method
 *	Description: Matjaz.....
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Status_adc_overflow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Status_adc_overflow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Status_adc_overflow) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Status_adc_overflow_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Status_adc_overflow
}
//--------------------------------------------------------
/**
 *	Read attribute X related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_X(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_X(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_X) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_X_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_X
}
//--------------------------------------------------------
/**
 *	Read attribute Y related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Y(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Y(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Y) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Y_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Y
}
//--------------------------------------------------------
/**
 *	Read attribute Sum related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Sum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Sum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Sum) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Sum_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Sum
}
//--------------------------------------------------------
/**
 *	Read attribute EnableADC related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_EnableADC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_EnableADC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_EnableADC) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_EnableADC_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_EnableADC
}
//--------------------------------------------------------
/**
 *	Write attribute EnableADC related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_EnableADC(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_EnableADC(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_EnableADC) ENABLED START -----*/
	
        if (w_val)
            m_signalADC->Enable();
        else
            m_signalADC->Disable();
        
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_EnableADC
}
//--------------------------------------------------------
/**
 *	Read attribute Q related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Q(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Q(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Q) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Q_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Q
}
//--------------------------------------------------------
/**
 *	Read attribute External_trigger_delay related method
 *	Description: Trigger signal is usually used to trigger acquisitions (except when synchronizing).Depending on the cable lengths and physical location of the processor module in theaccelerator, the trigger arrival to Libera Single Pass E units may be different.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_External_trigger_delay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_External_trigger_delay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_External_trigger_delay) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_External_trigger_delay_read);
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_External_trigger_delay
}
//--------------------------------------------------------
/**
 *	Write attribute External_trigger_delay related method
 *	Description: Trigger signal is usually used to trigger acquisitions (except when synchronizing).Depending on the cable lengths and physical location of the processor module in theaccelerator, the trigger arrival to Libera Single Pass E units may be different.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_External_trigger_delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_External_trigger_delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_External_trigger_delay) ENABLED START -----*/
	m_libera->UpdateScalar(attr_External_trigger_delay_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_External_trigger_delay
}
//--------------------------------------------------------
/**
 *	Read attribute Attenuation_id related method
 *	Description: Manual Gain control attenuation (0-31 dB)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Attenuation_id(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Attenuation_id(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Attenuation_id) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Attenuation_id_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Attenuation_id
}
//--------------------------------------------------------
/**
 *	Write attribute Attenuation_id related method
 *	Description: Manual Gain control attenuation (0-31 dB)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Attenuation_id(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Attenuation_id(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Attenuation_id) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_Attenuation_id_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Attenuation_id
}
//--------------------------------------------------------
/**
 *	Read attribute Attenuation_mode related method
 *	Description: Manual Gain control mode (mode/automatic)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Attenuation_mode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Attenuation_mode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Attenuation_mode) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Attenuation_mode_read);
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Attenuation_mode
}
//--------------------------------------------------------
/**
 *	Write attribute Attenuation_mode related method
 *	Description: Manual Gain control mode (mode/automatic)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Attenuation_mode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Attenuation_mode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Attenuation_mode) ENABLED START -----*/
	m_libera->UpdateScalar(attr_Attenuation_mode_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Attenuation_mode
}
//--------------------------------------------------------
/**
 *	Read attribute Bunch_Threshold related method
 *	Description: Start point of the data processing
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_Bunch_Threshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_Bunch_Threshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_Bunch_Threshold) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Bunch_Threshold_read);
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_Bunch_Threshold
}
//--------------------------------------------------------
/**
 *	Write attribute Bunch_Threshold related method
 *	Description: Start point of the data processing
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaSinglePassE::write_Bunch_Threshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::write_Bunch_Threshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaSinglePassE::write_Bunch_Threshold) ENABLED START -----*/
	m_libera->UpdateScalar(attr_Bunch_Threshold_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::write_Bunch_Threshold
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelA related method
 *	Description: The A StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_ADCChannelA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_ADCChannelA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ADCChannelA) ENABLED START -----*/
	//	Set the attribute value
        
	attr.set_value(attr_ADCChannelA_read, *attr_ADCBufferSize_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ADCChannelA
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelB related method
 *	Description: The B StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_ADCChannelB(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_ADCChannelB(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ADCChannelB) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ADCChannelB_read, *attr_ADCBufferSize_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ADCChannelB
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelC related method
 *	Description: The C StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_ADCChannelC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_ADCChannelC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ADCChannelC) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ADCChannelC_read, *attr_ADCBufferSize_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ADCChannelC
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelD related method
 *	Description: The D StripLine ADC buffer
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 10000
 */
//--------------------------------------------------------
void LiberaSinglePassE::read_ADCChannelD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaSinglePassE::read_ADCChannelD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::read_ADCChannelD) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ADCChannelD_read, *attr_ADCBufferSize_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::read_ADCChannelD
}

//--------------------------------------------------------
/**
 *	Method      : LiberaSinglePassE::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaSinglePassE::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaSinglePassE::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: Reset the device in case of fault
 *
 */
//--------------------------------------------------------
void LiberaSinglePassE::reset()
{
	DEBUG_STREAM << "LiberaSinglePassE::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::reset) ENABLED START -----*/

	//	Add your own code
	set_state(Tango::ON);
	set_status(ON_STATUS);

	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::reset
}
//--------------------------------------------------------
/**
 *	Command ResetInterlockStatus related method
 *	Description: Matjaz.....
 *
 */
//--------------------------------------------------------
void LiberaSinglePassE::reset_interlock_status()
{
	DEBUG_STREAM << "LiberaSinglePassE::ResetInterlockStatus()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::reset_interlock_status) ENABLED START -----*/

        m_libera->Execute(m_spe + "interlock.status.reset");
        return;
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::reset_interlock_status
}
//--------------------------------------------------------
/**
 *	Command MagicCommand related method
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaSinglePassE::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaSinglePassE::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaSinglePassE::magic_command) ENABLED START -----*/

	//	Add your own code
        argout = new Tango::DevVarStringArray(1);
        argout->length(1);

        if (!m_libera->MagicCommand(argin, argout)) {
            INFO_STREAM << "magic_command() failed!" << endl;
        }
	/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::magic_command
	return argout;
}

/*----- PROTECTED REGION ID(LiberaSinglePassE::namespace_ending) ENABLED START -----*/

/*
 *      Event stream callback
 */
void LiberaSinglePassE::EventCallback()
{        
        m_signalEvent->GetData();
        m_signalADC->GetData();

        push_change_event("TriggerCounter", attr_TriggerCounter_read);
}

/*
 *      SPE stream callback
 */
void LiberaSinglePassE::SPECallback()
{
        m_signalSPE->GetData();

        push_change_event("X", attr_X_read);
        push_change_event("Y", attr_Y_read);
        push_change_event("Q", attr_Q_read);
        push_change_event("Sum", attr_Sum_read);
}

/*
 * EventCallback static wrapper
 */
void LiberaSinglePassE::_EventCallback(void *data)
{
        LiberaSinglePassE *device = reinterpret_cast<LiberaSinglePassE *>(data);
        device->EventCallback();
}

/*
 * SPECallback static wrapper
 */
void LiberaSinglePassE::_SPECallback(void *data)
{
        LiberaSinglePassE *device = reinterpret_cast<LiberaSinglePassE *>(data);
        device->SPECallback();
}

void LiberaSinglePassE::init_settings()
{
	try
	{
		m_libera->UpdateScalar(attr_Bunch_Threshold_read, single_Pass_Threshold);
	}
	catch (...)
	{
		set_state(Tango::FAULT);
		return;
	}
}


/*----- PROTECTED REGION END -----*/	//	LiberaSinglePassE::namespace_ending
} //	namespace
