/**

@mainpage Tango Device Server for Single Pass

@section libera_introduction Introduction

This Tango Device Server interfaces the Tango Control System with the Libera MCI drivers.

All the Libera devices expose their functionalities via the MCI drivers, which are accessible via
 command line or via the MCI libraries.

A single Tango Device Server for Libera Single Pass controls a single RFSPE card inserted in the
 Libera chassis: up to 4 rfspe3 cards can be inserted in the chassis (rfspe1, rfspe2, rfspe3, rfspe4).

Some attributes are applied only to the RFSPE card controlled by the device server, while others
 are global and affect the entire Libera.

You must define in the Tango DB a Libera Tango Device Server for each RFSPE card installed in the
 Libera chassis: so if two RFSPE cards are present then you have to define two different instances
 of Libera Tango Device Server.



@page libera_compilation How to compile the driver

@section libera_compilation_prerequisites Prerequisites

The Libera Brilliance+ is controlled by a computer running Ubuntu 10.04 32 bit server edition: the OS on the machine on which
 the driver is compiled should match the OS in Libera.

In order to compile the Tango Device Driver you need:

- a machine with Ubuntu 10.04 32 bit (newer OS has libraries that are incompatible with the
  libera Debian packages supplied by i-tech)
- the g++ compiler 4.4 or newer:
- the Qt development tools (QMake)
  - in Synaptic install "qt4-qmake"
- the following debian packages provided by i-tech (double click on them):
  - libera-base2.8-dev_2.8-166+r20395_i386.deb
  - libera-base2.8-dev_2.8-166+r20395_i386.deb
  - libera-mci2.8_2.8-166+r20395_i386.deb
  - libera-mci2.8-dev_2.8-166+r20395_i386.deb
  - libusb-1.0-0_1.0.8-2~lucid1_i386.deb
- the tango control system
- Doxygen to generate the documentation (optional)


@section libera_compilation_compilation Compilation

@subsection libera_compilation_interactive IDE

A solution for QtCreator is available: open QtCreator and load the project libera.pro.


@subsection libera_compilation_batch Command line

You can compile the driver with ANT, qmake (if you have qt4-qmake installed) or with make.


@subsubsection libera_compilation_ant Compiling with ANT

The ANT script requires apache ANT installed.

The script builds the binaries and also the Debian package for installation on the Libera device.

The ANT script also has the requirements of @ref libera_compilation_make.

To compile:
- cd into the src folder that contains build.xml
- type:\n
  ant -Dbuild.number=BUILDNUMBER\n
  where BUILDNUMBER is the version to assign to the binaries and Debian package
- take the debian package from the folder "artifacts"


@subsubsection libera_compilation_qmake Compiling with qmake

Enter into the src folder of the Libera project and type:
@code
cd DeviceServer/src
qmake libera.pro
@endcode

This will generate the executable to be installed on libera (see @ref libera_driver_installation).


@subsubsection libera_compilation_make Compiling with make

Enter into the src folder of the Libera project and type:
@code
cd DeviceServer/src
make
@endcode

This will generate the executable to be installed on libera (see @ref libera_driver_installation).




@page libera_driver_installation Installing the Tango Device Server into Libera


Copy the debian package generated by the ANT build (@ref libera_compilation_ant) into libera
 and then type:
 @code
 dpkg -i liberapackage.deb
 @endcode
(replace liberapackage.deb with the actual name of the debian package)

Then launch /usr/local/bin/LiberaBrilliancePlus/configure.sh specifying the following arguments:
- IP and port of the tango db
- name for the first instance of Libera
- name for the second instance of libera
- name for the third instance of libera
- name for the fourth instance of libera

The name of the instances can be empty strings if they are not used.
For instance, on a libera which have only 2 measurement units named "unit1" and "unit2":
@code
/usr/local/bin/LiberaBrilliancePlus/configure.sh 10.0.0.20:10000 "unit1" "unit2" "" ""
@endcode

This will register the libera device server as a service and will launch it.

The service will be launched automatically after the system boots. When a service cannot connect to the
 Tango Database then it will stop and will have to be restarted manually (or the machine will have to be rebooted).
To start the service manually:
@code
service LiberaBrilliancePlus start
@endcode

In the Tango database you have to configure the device's property "LiberaBoard" with the ID of the board controlled by
 the device ("rfspe1", "rfspe2", "rfspe3" or "rfspe4"), then restart the device from Jive.



@page libera_test Testing the Libera Tango Device Server

On the Tango Host launch the python script "libera-test" located in the DeviceServer/test folder and specify:
- the location of the file containing the definitions for the tests (mapping.xml)
- the Libera Device Server ORI and the mapping file containing
- the IP of the libera device
- the user name used to SSH into the libera device
- the password used to SSH into the libera device

Example:
@code
cd DeviceServer/test
python libera-test.py mapping.xml oriRoot/oriLocation/oriDevice 10.2.3.4 root Jungle
@endcode

The test will compare the attributes with the values returned by the libera MCI interface, and it will also test if the
 attributes' flags are correct according to the list provided by Solaris (read, write, expert only).



*/
